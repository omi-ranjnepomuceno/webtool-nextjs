/* tslint:disable */
/* eslint-disable */

export enum AccessGroupErrorCode {
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INVALID = "INVALID",
  NOT_FOUND = "NOT_FOUND",
  REQUIRED = "REQUIRED",
  UNIQUE = "UNIQUE",
}

export enum AccessTypeEnum {
  BRAND = "BRAND",
  MALL = "MALL",
  TENANT = "TENANT",
}

export enum AccountErrorCode {
  ACTIVATE_OWN_ACCOUNT = "ACTIVATE_OWN_ACCOUNT",
  ACTIVATE_SUPERUSER_ACCOUNT = "ACTIVATE_SUPERUSER_ACCOUNT",
  DEACTIVATE_OWN_ACCOUNT = "DEACTIVATE_OWN_ACCOUNT",
  DEACTIVATE_SUPERUSER_ACCOUNT = "DEACTIVATE_SUPERUSER_ACCOUNT",
  DELETE_NON_STAFF_USER = "DELETE_NON_STAFF_USER",
  DELETE_OWN_ACCOUNT = "DELETE_OWN_ACCOUNT",
  DELETE_STAFF_ACCOUNT = "DELETE_STAFF_ACCOUNT",
  DELETE_SUPERUSER_ACCOUNT = "DELETE_SUPERUSER_ACCOUNT",
  DUPLICATED_INPUT_ITEM = "DUPLICATED_INPUT_ITEM",
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INVALID = "INVALID",
  INVALID_ACCESS_OBJECT = "INVALID_ACCESS_OBJECT",
  INVALID_CREDENTIALS = "INVALID_CREDENTIALS",
  INVALID_PASSWORD = "INVALID_PASSWORD",
  JWT_DECODE_ERROR = "JWT_DECODE_ERROR",
  JWT_INVALID_CSRF_TOKEN = "JWT_INVALID_CSRF_TOKEN",
  JWT_INVALID_TOKEN = "JWT_INVALID_TOKEN",
  JWT_MISSING_TOKEN = "JWT_MISSING_TOKEN",
  JWT_SIGNATURE_EXPIRED = "JWT_SIGNATURE_EXPIRED",
  LEFT_NOT_MANAGEABLE_PERMISSION = "LEFT_NOT_MANAGEABLE_PERMISSION",
  NOT_FOUND = "NOT_FOUND",
  OTP_ALREADY_USED = "OTP_ALREADY_USED",
  OTP_UNVERIFIED = "OTP_UNVERIFIED",
  OUT_OF_SCOPE_GROUP = "OUT_OF_SCOPE_GROUP",
  OUT_OF_SCOPE_PERMISSION = "OUT_OF_SCOPE_PERMISSION",
  OUT_OF_SCOPE_SERVICE_ACCOUNT = "OUT_OF_SCOPE_SERVICE_ACCOUNT",
  OUT_OF_SCOPE_USER = "OUT_OF_SCOPE_USER",
  PASSWORD_ENTIRELY_NUMERIC = "PASSWORD_ENTIRELY_NUMERIC",
  PASSWORD_TOO_COMMON = "PASSWORD_TOO_COMMON",
  PASSWORD_TOO_PLAIN = "PASSWORD_TOO_PLAIN",
  PASSWORD_TOO_SHORT = "PASSWORD_TOO_SHORT",
  PASSWORD_TOO_SIMILAR = "PASSWORD_TOO_SIMILAR",
  PERMISSION_GROUP_NOT_FOUND = "PERMISSION_GROUP_NOT_FOUND",
  REQUIRED = "REQUIRED",
  UNIQUE = "UNIQUE",
  USER_BLOCKED = "USER_BLOCKED",
  USER_DELETED = "USER_DELETED",
  USER_UNVERIFIED = "USER_UNVERIFIED",
}

export enum ActivityLogActionsEnum {
  UPDATE = "UPDATE",
  DELETE = "DELETE",
  CREATE = "CREATE",
}

export enum ActivityLogSortField {
  CREATED_AT = "CREATED_AT",
  UPDATED_AT = "UPDATED_AT",
}

export enum AddressTypeEnum {
  BILLING = "BILLING",
  SHIPPING = "SHIPPING",
}

export enum AnnouncementErrorCode {
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INVALID = "INVALID",
  NOT_FOUND = "NOT_FOUND",
  REQUIRED = "REQUIRED",
}

export enum AnnouncementPublishingStatusEnum {
  DELETED = "DELETED",
  PUBLISHED = "PUBLISHED",
  SCHEDULED = "SCHEDULED",
  UNPUBLISHED = "UNPUBLISHED",
}

export enum AnnouncementSortField {
  PUBLISHING_DATE = "PUBLISHING_DATE",
}

export enum AppConfigErrorCode {
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INVALID = "INVALID",
  JSON_INV = "JSON_INV",
  JSON_REQ = "JSON_REQ",
  REQUIRED = "REQUIRED",
}

export enum AppConfigOrderField {
  NAME = "NAME",
  RECENT = "RECENT",
  VERSION = "VERSION",
}

export enum AppErrorCode {
  FORBIDDEN = "FORBIDDEN",
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INVALID = "INVALID",
  INVALID_MANIFEST_FORMAT = "INVALID_MANIFEST_FORMAT",
  INVALID_PERMISSION = "INVALID_PERMISSION",
  INVALID_STATUS = "INVALID_STATUS",
  INVALID_URL_FORMAT = "INVALID_URL_FORMAT",
  MANIFEST_URL_CANT_CONNECT = "MANIFEST_URL_CANT_CONNECT",
  NOT_FOUND = "NOT_FOUND",
  OUT_OF_SCOPE_APP = "OUT_OF_SCOPE_APP",
  OUT_OF_SCOPE_PERMISSION = "OUT_OF_SCOPE_PERMISSION",
  REQUIRED = "REQUIRED",
  UNIQUE = "UNIQUE",
}

export enum AutoBookingErrorCode {
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INVALID = "INVALID",
  NOT_FOUND = "NOT_FOUND",
  REQUIRED = "REQUIRED",
  UNIQUE = "UNIQUE",
}

export enum AppSortField {
  CREATION_DATE = "CREATION_DATE",
  NAME = "NAME",
}

export enum AppTypeEnum {
  LOCAL = "LOCAL",
  THIRDPARTY = "THIRDPARTY",
}

export enum AttributeInputTypeEnum {
  DROPDOWN = "DROPDOWN",
  MULTISELECT = "MULTISELECT",
}

export enum AttributeSortField {
  AVAILABLE_IN_GRID = "AVAILABLE_IN_GRID",
  FILTERABLE_IN_DASHBOARD = "FILTERABLE_IN_DASHBOARD",
  FILTERABLE_IN_STOREFRONT = "FILTERABLE_IN_STOREFRONT",
  IS_VARIANT_ONLY = "IS_VARIANT_ONLY",
  NAME = "NAME",
  SLUG = "SLUG",
  STOREFRONT_SEARCH_POSITION = "STOREFRONT_SEARCH_POSITION",
  VALUE_REQUIRED = "VALUE_REQUIRED",
  VISIBLE_IN_STOREFRONT = "VISIBLE_IN_STOREFRONT",
}

export enum AttributeTypeEnum {
  PRODUCT = "PRODUCT",
  VARIANT = "VARIANT",
}

export enum AttributeValueType {
  COLOR = "COLOR",
  GRADIENT = "GRADIENT",
  STRING = "STRING",
  URL = "URL",
}

export enum AuthorizationKeyType {
  FACEBOOK = "FACEBOOK",
  GOOGLE_OAUTH2 = "GOOGLE_OAUTH2",
}

export enum BannerErrorCode {
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INVALID = "INVALID",
  NOT_FOUND = "NOT_FOUND",
  REQUIRED = "REQUIRED",
  UNIQUE = "UNIQUE",
}

export enum BannerVerticalEnum {
  CINEMA = "CINEMA",
  FOOD = "FOOD",
  GROCERY = "GROCERY",
  HOMEPAGE = "HOMEPAGE",
  IN_MALL_DEALS = "IN_MALL_DEALS",
  SHOPS = "SHOPS",
  SM_FULFILLED = "SM_FULFILLED",
}

export enum BatchStatus {
  CANCELLED = "CANCELLED",
  COMPLETED = "COMPLETED",
  FOR_MANAGER_APPROVAL = "FOR_MANAGER_APPROVAL",
  FOR_TREASURY_2_PROCESSING = "FOR_TREASURY_2_PROCESSING",
  FOR_TREASURY_APPROVAL = "FOR_TREASURY_APPROVAL",
  PROCESSED = "PROCESSED",
  REJECTED = "REJECTED",
}

export enum BrandErrorCode {
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INVALID = "INVALID",
  MISSING_INTERNAL_DETAILS = "MISSING_INTERNAL_DETAILS",
  NOT_FOUND = "NOT_FOUND",
  REQUIRED = "REQUIRED",
  UNIQUE = "UNIQUE",
}

export enum BrandGroupClassification {
  FOOD_AND_BEVERAGES = "FOOD_AND_BEVERAGES",
  GENERAL_MERCHANDISE = "GENERAL_MERCHANDISE",
}

export enum BrandGroupSortField {
  CREATION_DATE = "CREATION_DATE",
  MALL_DISTANCE = "MALL_DISTANCE",
  BRAND_GROUP_NAME = "BRAND_GROUP_NAME",
  UPDATE_DATE = "UPDATE_DATE",
}

export enum BrandVerticalEnum {
  CYBERZONE = "CYBERZONE",
  FOOD_AND_BEVERAGES = "FOOD_AND_BEVERAGES",
  GROCERY = "GROCERY",
  MARKETPLACE = "MARKETPLACE",
  RETAIL_AFFILIATES = "RETAIL_AFFILIATES",
  SM_FULFILLED = "SM_FULFILLED",
}

export enum CategorySortField {
  NAME = "NAME",
  PRODUCT_COUNT = "PRODUCT_COUNT",
  RANDOM = "RANDOM",
  SUBCATEGORY_COUNT = "SUBCATEGORY_COUNT",
}

export enum ClassificationTypeEnum {
  FOOD_AND_BEVERAGES = "FOOD_AND_BEVERAGES",
  GENERAL_MERCHANDISE = "GENERAL_MERCHANDISE",
}

export enum ClusterErrorCode {
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INVALID = "INVALID",
  NOT_FOUND = "NOT_FOUND",
  REQUIRED = "REQUIRED",
}

export enum CollectionPublished {
  HIDDEN = "HIDDEN",
  PUBLISHED = "PUBLISHED",
}

export enum CollectionSortField {
  AVAILABILITY = "AVAILABILITY",
  NAME = "NAME",
  PRODUCT_COUNT = "PRODUCT_COUNT",
  PUBLICATION_DATE = "PUBLICATION_DATE",
}

export enum CompletedReasonsEnum {
  DELIVERED = "DELIVERED",
  OTHER = "OTHER",
  PICKED_UP = "PICKED_UP",
}

export enum ConfigurationTypeFieldEnum {
  BOOLEAN = "BOOLEAN",
  PASSWORD = "PASSWORD",
  SECRET = "SECRET",
  SECRETMULTILINE = "SECRETMULTILINE",
  STRING = "STRING",
}

export enum DiscountMetricEnum {
  COMPLETED_ORDER = "COMPLETED_ORDER",
  REDEEMED_COUPON = "REDEEMED_COUPON",
}

export enum DiscountOperationEnum {
  EQ = "EQ",
  GE = "GE",
  GT = "GT",
  LE = "LE",
  LT = "LT",
}

export enum CountryCode {
  AD = "AD",
  AE = "AE",
  AF = "AF",
  AG = "AG",
  AI = "AI",
  AL = "AL",
  AM = "AM",
  AO = "AO",
  AQ = "AQ",
  AR = "AR",
  AS = "AS",
  AT = "AT",
  AU = "AU",
  AW = "AW",
  AX = "AX",
  AZ = "AZ",
  BA = "BA",
  BB = "BB",
  BD = "BD",
  BE = "BE",
  BF = "BF",
  BG = "BG",
  BH = "BH",
  BI = "BI",
  BJ = "BJ",
  BL = "BL",
  BM = "BM",
  BN = "BN",
  BO = "BO",
  BQ = "BQ",
  BR = "BR",
  BS = "BS",
  BT = "BT",
  BV = "BV",
  BW = "BW",
  BY = "BY",
  BZ = "BZ",
  CA = "CA",
  CC = "CC",
  CD = "CD",
  CF = "CF",
  CG = "CG",
  CH = "CH",
  CI = "CI",
  CK = "CK",
  CL = "CL",
  CM = "CM",
  CN = "CN",
  CO = "CO",
  CR = "CR",
  CU = "CU",
  CV = "CV",
  CW = "CW",
  CX = "CX",
  CY = "CY",
  CZ = "CZ",
  DE = "DE",
  DJ = "DJ",
  DK = "DK",
  DM = "DM",
  DO = "DO",
  DZ = "DZ",
  EC = "EC",
  EE = "EE",
  EG = "EG",
  EH = "EH",
  ER = "ER",
  ES = "ES",
  ET = "ET",
  EU = "EU",
  FI = "FI",
  FJ = "FJ",
  FK = "FK",
  FM = "FM",
  FO = "FO",
  FR = "FR",
  GA = "GA",
  GB = "GB",
  GD = "GD",
  GE = "GE",
  GF = "GF",
  GG = "GG",
  GH = "GH",
  GI = "GI",
  GL = "GL",
  GM = "GM",
  GN = "GN",
  GP = "GP",
  GQ = "GQ",
  GR = "GR",
  GS = "GS",
  GT = "GT",
  GU = "GU",
  GW = "GW",
  GY = "GY",
  HK = "HK",
  HM = "HM",
  HN = "HN",
  HR = "HR",
  HT = "HT",
  HU = "HU",
  ID = "ID",
  IE = "IE",
  IL = "IL",
  IM = "IM",
  IN = "IN",
  IO = "IO",
  IQ = "IQ",
  IR = "IR",
  IS = "IS",
  IT = "IT",
  JE = "JE",
  JM = "JM",
  JO = "JO",
  JP = "JP",
  KE = "KE",
  KG = "KG",
  KH = "KH",
  KI = "KI",
  KM = "KM",
  KN = "KN",
  KP = "KP",
  KR = "KR",
  KW = "KW",
  KY = "KY",
  KZ = "KZ",
  LA = "LA",
  LB = "LB",
  LC = "LC",
  LI = "LI",
  LK = "LK",
  LR = "LR",
  LS = "LS",
  LT = "LT",
  LU = "LU",
  LV = "LV",
  LY = "LY",
  MA = "MA",
  MC = "MC",
  MD = "MD",
  ME = "ME",
  MF = "MF",
  MG = "MG",
  MH = "MH",
  MK = "MK",
  ML = "ML",
  MM = "MM",
  MN = "MN",
  MO = "MO",
  MP = "MP",
  MQ = "MQ",
  MR = "MR",
  MS = "MS",
  MT = "MT",
  MU = "MU",
  MV = "MV",
  MW = "MW",
  MX = "MX",
  MY = "MY",
  MZ = "MZ",
  NA = "NA",
  NC = "NC",
  NE = "NE",
  NF = "NF",
  NG = "NG",
  NI = "NI",
  NL = "NL",
  NO = "NO",
  NP = "NP",
  NR = "NR",
  NU = "NU",
  NZ = "NZ",
  OM = "OM",
  PA = "PA",
  PE = "PE",
  PF = "PF",
  PG = "PG",
  PH = "PH",
  PK = "PK",
  PL = "PL",
  PM = "PM",
  PN = "PN",
  PR = "PR",
  PS = "PS",
  PT = "PT",
  PW = "PW",
  PY = "PY",
  QA = "QA",
  RE = "RE",
  RO = "RO",
  RS = "RS",
  RU = "RU",
  RW = "RW",
  SA = "SA",
  SB = "SB",
  SC = "SC",
  SD = "SD",
  SE = "SE",
  SG = "SG",
  SH = "SH",
  SI = "SI",
  SJ = "SJ",
  SK = "SK",
  SL = "SL",
  SM = "SM",
  SN = "SN",
  SO = "SO",
  SR = "SR",
  SS = "SS",
  ST = "ST",
  SV = "SV",
  SX = "SX",
  SY = "SY",
  SZ = "SZ",
  TC = "TC",
  TD = "TD",
  TF = "TF",
  TG = "TG",
  TH = "TH",
  TJ = "TJ",
  TK = "TK",
  TL = "TL",
  TM = "TM",
  TN = "TN",
  TO = "TO",
  TR = "TR",
  TT = "TT",
  TV = "TV",
  TW = "TW",
  TZ = "TZ",
  UA = "UA",
  UG = "UG",
  UM = "UM",
  US = "US",
  UY = "UY",
  UZ = "UZ",
  VA = "VA",
  VC = "VC",
  VE = "VE",
  VG = "VG",
  VI = "VI",
  VN = "VN",
  VU = "VU",
  WF = "WF",
  WS = "WS",
  YE = "YE",
  YT = "YT",
  ZA = "ZA",
  ZM = "ZM",
  ZW = "ZW",
}

export enum CouponAssignee {
  APP_DEVELOPMENT = "APP_DEVELOPMENT",
  HO_MARKETING = "HO_MARKETING",
  MALL_MARKETING = "MALL_MARKETING",
  SMO_COMMERCIAL = "SMO_COMMERCIAL",
  SMO_MARKETING = "SMO_MARKETING",
  SM_DEALS = "SM_DEALS",
}

export enum CouponAssigneeEnum {
  APP_DEVELOPMENT = "APP_DEVELOPMENT",
  HO_MARKETING = "HO_MARKETING",
  MALL_MARKETING = "MALL_MARKETING",
  SMO_COMMERCIAL = "SMO_COMMERCIAL",
  SMO_MARKETING = "SMO_MARKETING",
  SM_DEALS = "SM_DEALS",
}

export enum CouponCategoryEnum {
  CYBERZONE = "CYBERZONE",
  DINING = "DINING",
  ENTERTAINMENT = "ENTERTAINMENT",
  GROCERIES = "GROCERIES",
  HOBBIES_AND_SPECIALTY = "HOBBIES_AND_SPECIALTY",
  HOME = "HOME",
  SHOPPING = "SHOPPING",
  WELLNESS = "WELLNESS",
}

export enum CouponCollectionCategoryEnum {
  CYBERZONE = "CYBERZONE",
  DINING = "DINING",
  ENTERTAINMENT = "ENTERTAINMENT",
  EVENTS = "EVENTS",
  GROCERIES = "GROCERIES",
  SHOPPING = "SHOPPING",
  WELLNESS = "WELLNESS",
}

export enum CouponCollectionClassificationEnum {
  ALL = "ALL",
  DEALS = "DEALS",
  EVENTS = "EVENTS",
}

export enum CouponCollectionSortField {
  CREATED_AT = "CREATED_AT",
  END_DATE = "END_DATE",
  FEATURE_INDEX = "FEATURE_INDEX",
  START_DATE = "START_DATE",
  TITLE = "TITLE",
  UPDATED_AT = "UPDATED_AT",
}

export enum CouponCollectionStatusEnum {
  ACTIVE = "ACTIVE",
  DELETED = "DELETED",
  DRAFT = "DRAFT",
  EXPIRED = "EXPIRED",
  INACTIVE = "INACTIVE",
  SCHEDULED = "SCHEDULED",
}

export enum CouponDealType {
  DEALS = "DEALS",
  EVENTS = "EVENTS",
}

export enum CouponDealTypeEnum {
  DEALS = "DEALS",
  EVENTS = "EVENTS",
}

export enum CouponNotificationStatusEnum {
  FOR_REDEMPTION = "FOR_REDEMPTION",
  IDLE = "IDLE",
  NEAR_EXPIRY = "NEAR_EXPIRY",
  READ_NEAR_EXPIRY = "READ_NEAR_EXPIRY",
  READ_REDEMPTION = "READ_REDEMPTION",
}

export enum CouponOccurenceEnum {
  DAILY = "DAILY",
  MONTHLY = "MONTHLY",
  WEEKLY = "WEEKLY",
  YEARLY = "YEARLY",
}

export enum CouponOccurenceExcludeEnum {
  FRIDAY = "FRIDAY",
  MONDAY = "MONDAY",
  SATURDAY = "SATURDAY",
  SUNDAY = "SUNDAY",
  THURSDAY = "THURSDAY",
  TUESDAY = "TUESDAY",
  WEDNESDAY = "WEDNESDAY",
}

export enum CouponRedeemTypeEnum {
  REDEEM_LATER = "REDEEM_LATER",
  REDEEM_NOW = "REDEEM_NOW",
}

export enum CouponRedemptionSortField {
  CLAIMED_AT = "CLAIMED_AT",
  CODE = "CODE",
  COUPON = "COUPON",
  REDEEMED_AT = "REDEEMED_AT",
}

export enum CouponRedemptionStatusEnum {
  CLAIMED = "CLAIMED",
  EXPIRED = "EXPIRED",
  REDEEMED = "REDEEMED",
}

export enum CouponReorderActionEnum {
  BOTTOM_MOST = "BOTTOM_MOST",
  ONE_DOWN = "ONE_DOWN",
  ONE_UP = "ONE_UP",
  TOP_MOST = "TOP_MOST",
}

export enum CouponSortField {
  CODE = "CODE",
  ASSIGNED_AT = "ASSIGNED_AT",
  END_DATE = "END_DATE",
  EVENT_END_DATE = "EVENT_END_DATE",
  EVENT_END_DATE_NAME = "EVENT_END_DATE_NAME",
  EVENT_END_DATE_PROMO = "EVENT_END_DATE_PROMO",
  EVENT_START_DATE = "EVENT_START_DATE",
  EVENT_START_DATE_NAME = "EVENT_START_DATE_NAME",
  EVENT_START_DATE_PROMO = "EVENT_START_DATE_PROMO",
  IS_FEATURED_NAME = "IS_FEATURED_NAME",
  IS_FEATURED_PROMO_TITLE = "IS_FEATURED_PROMO_TITLE",
  MAIN_PROMO_TITLE = "MAIN_PROMO_TITLE",
  MOST_RECENT_FEATURED = "MOST_RECENT_FEATURED",
  NAME = "NAME",
  ORDERED_FEATURED_NAME = "ORDERED_FEATURED_NAME",
  ORDERED_FEATURED_PROMO_TITLE = "ORDERED_FEATURED_PROMO_TITLE",
  REDEEM_END_DATE = "REDEEM_END_DATE",
  REDEEM_END_DATE_NAME = "REDEEM_END_DATE_NAME",
  REDEEM_END_DATE_PROMO = "REDEEM_END_DATE_PROMO",
  REDEEM_START_DATE = "REDEEM_START_DATE",
  REDEEM_START_DATE_NAME = "REDEEM_START_DATE_NAME",
  REDEEM_START_DATE_PROMO = "REDEEM_START_DATE_PROMO",
  REDEMPTION_CLAIMED_AT = "REDEMPTION_CLAIMED_AT",
  REDEMPTION_EXPIRED_AT = "REDEMPTION_EXPIRED_AT",
  REDEMPTION_REDEEMED_AT = "REDEMPTION_REDEEMED_AT",
  START_DATE = "START_DATE",
}

export enum CouponStatusEnum {
  ACTIVE = "ACTIVE",
  COMPLETED = "COMPLETED",
  DELETED = "DELETED",
  EXPIRED = "EXPIRED",
  DRAFT = "DRAFT",
  INACTIVE = "INACTIVE",
  SCHEDULED = "SCHEDULED",
}

export enum CouponUserTypeEnum {
  ALL = "ALL",
  EXISTING = "EXISTING",
  NEW = "NEW",
}

export enum CourierFilter {
  IN_HOUSE = "IN_HOUSE",
  TWO_GO = "TWO_GO",
  LALAMOVE = "LALAMOVE",
  GRAB = "GRAB",
  GRAB_EXPRESS = "GRAB_EXPRESS",
  PANDAGO = "PANDAGO",
  PANDAGO_AUTO = "PANDAGO_AUTO",
}

export enum CourierTypeEnum {
  GRAB = "GRAB",
  IN_HOUSE = "IN_HOUSE",
  LALAMOVE = "LALAMOVE",
  OTHERS = "OTHERS",
  PANDAGO = "PANDAGO",
}

export enum CustomerSegment {
  SEGMENT1 = "SEGMENT1",
  SEGMENT2 = "SEGMENT2",
  SEGMENT3 = "SEGMENT3",
}

export enum CustomerStatus {
  ACT = "ACT",
  NEW = "NEW",
}

export enum DeliveriesStatus {
  GENERAL_ASSIGNING = "GENERAL_ASSIGNING",
  GENERAL_PICKING_UP = "GENERAL_PICKING_UP",
  GENERAL_IN_DELIVERY = "GENERAL_IN_DELIVERY",
  GENERAL_COMPLETED = "GENERAL_COMPLETED",
  GENERAL_CANCELLED = "GENERAL_CANCELLED",
  GENERAL_IN_RETURN = "GENERAL_IN_RETURN",
  GENERAL_RETURNED = "GENERAL_RETURNED",
  GENERAL_FAILED = "GENERAL_FAILED",
  GENERAL_DELAYED = "GENERAL_DELAYED",
  GENERAL_USER_CANCELLED = "GENERAL_USER_CANCELLED",
  GRAB_ALLOCATING = "GRAB_ALLOCATING",
  GRAB_CANCELED = "GRAB_CANCELED",
  GRAB_COMPLETED = "GRAB_COMPLETED",
  GRAB_FAILED = "GRAB_FAILED",
  GRAB_IN_DELIVERY = "GRAB_IN_DELIVERY",
  GRAB_IN_RETURN = "GRAB_IN_RETURN",
  GRAB_PENDING_DROP_OFF = "GRAB_PENDING_DROP_OFF",
  GRAB_PENDING_PICKUP = "GRAB_PENDING_PICKUP",
  GRAB_PICKING_UP = "GRAB_PICKING_UP",
  GRAB_QUEUEING = "GRAB_QUEUEING",
  GRAB_RETURNED = "GRAB_RETURNED",
  GRAB_USER_CANCELED = "GRAB_USER_CANCELED",
  TP_2GO_ACCEPTANCE = "TP_2GO_ACCEPTANCE",
  TP_2GO_ARRIVAL = "TP_2GO_ARRIVAL",
  TP_2GO_BAD_ADDRESS = "TP_2GO_BAD_ADDRESS",
  TP_2GO_BUSINESS_CLOSED = "TP_2GO_BUSINESS_CLOSED",
  TP_2GO_CANCELLED = "TP_2GO_CANCELLED",
  TP_2GO_CONSIGNEE_NOT_AROUND = "TP_2GO_CONSIGNEE_NOT_AROUND",
  TP_2GO_DELIVERED = "TP_2GO_DELIVERED",
  TP_2GO_DELIVERY_CANCELLED = "TP_2GO_DELIVERY_CANCELLED",
  TP_2GO_FAILED_BOOKING = "TP_2GO_FAILED_BOOKING",
  TP_2GO_FLOODED_AREA = "TP_2GO_FLOODED_AREA",
  TP_2GO_HOLD_TRANSACTION = "TP_2GO_HOLD_TRANSACTION",
  TP_2GO_INVOICE_FOR_CHECKING = "TP_2GO_INVOICE_FOR_CHECKING",
  TP_2GO_IN_TRANSIT = "TP_2GO_IN_TRANSIT",
  TP_2GO_LOADED = "TP_2GO_LOADED",
  TP_2GO_LOST_CARGO = "TP_2GO_LOST_CARGO",
  TP_2GO_MISROUTED = "TP_2GO_MISROUTED",
  TP_2GO_NO_SHOW = "TP_2GO_NO_SHOW",
  TP_2GO_OFFICE_CLOSED = "TP_2GO_OFFICE_CLOSED",
  TP_2GO_OFF_LOADED = "TP_2GO_OFF_LOADED",
  TP_2GO_ON_FORWARDED = "TP_2GO_ON_FORWARDED",
  TP_2GO_ON_HOLD = "TP_2GO_ON_HOLD",
  TP_2GO_OUT_FOR_DELIVERY = "TP_2GO_OUT_FOR_DELIVERY",
  TP_2GO_PAYMENT_NOT_READY = "TP_2GO_PAYMENT_NOT_READY",
  TP_2GO_REFUSED_TO_ACCEPT = "TP_2GO_REFUSED_TO_ACCEPT",
  TP_2GO_REFUSED_TO_PAY = "TP_2GO_REFUSED_TO_PAY",
  TP_2GO_RESIDENCE_CLOSED = "TP_2GO_RESIDENCE_CLOSED",
  TP_2GO_RETURNED_TO_CUSTOMER = "TP_2GO_RETURNED_TO_CUSTOMER",
  TP_2GO_RETURNED_TO_SENDER = "TP_2GO_RETURNED_TO_SENDER",
  TP_2GO_ROAD_CLOSED = "TP_2GO_ROAD_CLOSED",
  TP_2GO_SENT = "TP_2GO_SENT",
  TP_2GO_SERVED = "TP_2GO_SERVED",
  TP_2GO_TO_SEND = "TP_2GO_TO_SEND",
  TP_2GO_TRANSFERRED = "TP_2GO_TRANSFERRED",
  TP_2GO_UNKNOWN_CONSIGNEE = "TP_2GO_UNKNOWN_CONSIGNEE",
  TP_2GO_UNSERVED = "TP_2GO_UNSERVED",
  TP_2GO_WITH_FILED_CLAIMS = "TP_2GO_WITH_FILED_CLAIMS",
  PANDAGO_NEW = "PANDAGO_NEW",
  PANDAGO_RECEIVED = "PANDAGO_RECEIVED",
  PANDAGO_WAITING_FOR_TRANSPORT = "PANDAGO_WAITING_FOR_TRANSPORT",
  PANDAGO_ASSIGNED_TO_TRANSPORT = "PANDAGO_ASSIGNED_TO_TRANSPORT",
  PANDAGO_COURIER_ACCEPTED_DELIVERY = "PANDAGO_COURIER_ACCEPTED_DELIVERY",
  PANDAGO_NEAR_VENDOR = "PANDAGO_NEAR_VENDOR",
  PANDAGO_PICKED_UP = "PANDAGO_PICKED_UP",
  PANDAGO_COURIER_LEFT_VENDOR = "PANDAGO_COURIER_LEFT_VENDOR",
  PANDAGO_NEAR_CUSTOMER = "PANDAGO_NEAR_CUSTOMER",
  PANDAGO_DELIVERED = "PANDAGO__DELIVERED",
  PANDAGO_CANCELLED = "PANDAGO_CANCELLED",
  PANDAGO_RETURNED_TO_VENDOR = "PANDAGO_RETURNED_TO_VENDOR",
  PANDAGO_DELAYED = "PANDAGO_DELAYED",
  PANDAGO_USER_CANCELLED = "PANDAGO_USER_CANCELLED",
}

export enum DeliveryTypeEnum {
  EXPRESS = "EXPRESS",
  EXPRESS_LONG_DISTANCE = "EXPRESS_LONG_DISTANCE",
  IN_STORE_PICKUP = "IN_STORE_PICKUP",
  NATIONWIDE_DELIVERY = "NATIONWIDE_DELIVERY",
  NEXT_DAY = "NEXT_DAY",
  SAME_DAY = "SAME_DAY",
}

export enum DiscountDeliveryTypeEnum {
  ALL = "ALL",
  EXPRESS_DELIVERY = "EXPRESS_DELIVERY",
  EXPRESS_LONG_DISTANCE_DELIVERY = "EXPRESS_LONG_DISTANCE_DELIVERY",
  IN_STORE = "IN_STORE",
  NATIONWIDE_DELIVERY = "NATIONWIDE_DELIVERY",
  NEXT_DAY = "NEXT_DAY",
  SAME_DAY = "SAME_DAY",
}

export enum DiscountErrorCode {
  ALREADY_EXISTS = "ALREADY_EXISTS",
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INVALID = "INVALID",
  NOT_FOUND = "NOT_FOUND",
  REQUIRED = "REQUIRED",
  UNIQUE = "UNIQUE",
}

export enum DiscountPaymentMethodEnum {
  ALL = "ALL",
  CARD = "CARD",
  CASH = "CASH",
}

export enum DiscountStatusEnum {
  ACTIVE = "ACTIVE",
  DELETED = "DELETED",
  EXPIRED = "EXPIRED",
  INACTIVE = "INACTIVE",
  SCHEDULED = "SCHEDULED",
}

export enum DiscountValueTypeEnum {
  ABSOLUTE_VALUE = "ABSOLUTE_VALUE",
  FIXED = "FIXED",
  PERCENTAGE = "PERCENTAGE",
}

export enum DistanceUnitsEnum {
  CM = "CM",
  FT = "FT",
  M = "M",
  MM = "MM",
}

export enum DropOffLocationErrorCode {
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INVALID = "INVALID",
  NOT_FOUND = "NOT_FOUND",
  REQUIRED = "REQUIRED",
  UNIQUE = "UNIQUE",
}

export enum DropOffLocationSortField {
  UPDATED_DATE = "UPDATED_DATE",
}

export enum ExportErrorCode {
  INVALID = "INVALID",
  NOT_FOUND = "NOT_FOUND",
  REQUIRED = "REQUIRED",
}

export enum ExportScope {
  ALL = "ALL",
  FILTER = "FILTER",
  IDS = "IDS",
  IDS_AND_FILTER = "IDS_AND_FILTER",
}

export enum FileTypesEnum {
  CSV = "CSV",
  XLSX = "XLSX",
}

export enum FulfillmentStatus {
  CANCELED = "CANCELED",
  FULFILLED = "FULFILLED",
}

export enum Gender {
  FEMALE = "FEMALE",
  MALE = "MALE",
  NON_BINARY = "NON_BINARY",
  PREFER_NOT_TO_SAY = "PREFER_NOT_TO_SAY",
}

export enum HomeLocationErrorCode {
  ALREADY_EXISTS = "ALREADY_EXISTS",
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INVALID = "INVALID",
  NOT_FOUND = "NOT_FOUND",
  REQUIRED = "REQUIRED",
  UNIQUE = "UNIQUE",
}

export enum InvoiceErrorCode {
  EMAIL_NOT_SET = "EMAIL_NOT_SET",
  INVALID_STATUS = "INVALID_STATUS",
  NOT_FOUND = "NOT_FOUND",
  NOT_READY = "NOT_READY",
  NUMBER_NOT_SET = "NUMBER_NOT_SET",
  REQUIRED = "REQUIRED",
  URL_NOT_SET = "URL_NOT_SET",
}

export enum JobStatusEnum {
  DELETED = "DELETED",
  EMPTY_FILE = "EMPTY_FILE",
  FAILED = "FAILED",
  PENDING = "PENDING",
  SUCCESS = "SUCCESS",
  WITH_ERROR_FILE = "WITH_ERROR_FILE",
}

export enum LanguageCodeEnum {
  AR = "AR",
  AZ = "AZ",
  BG = "BG",
  BN = "BN",
  CA = "CA",
  CS = "CS",
  DA = "DA",
  DE = "DE",
  EL = "EL",
  EN = "EN",
  ES = "ES",
  ES_CO = "ES_CO",
  ET = "ET",
  FA = "FA",
  FI = "FI",
  FR = "FR",
  HI = "HI",
  HU = "HU",
  HY = "HY",
  ID = "ID",
  IS = "IS",
  IT = "IT",
  JA = "JA",
  KA = "KA",
  KM = "KM",
  KO = "KO",
  LT = "LT",
  MN = "MN",
  MY = "MY",
  NB = "NB",
  NL = "NL",
  PL = "PL",
  PT = "PT",
  PT_BR = "PT_BR",
  RO = "RO",
  RU = "RU",
  SK = "SK",
  SL = "SL",
  SQ = "SQ",
  SR = "SR",
  SV = "SV",
  SW = "SW",
  TA = "TA",
  TH = "TH",
  TR = "TR",
  UK = "UK",
  VI = "VI",
  ZH_HANS = "ZH_HANS",
  ZH_HANT = "ZH_HANT",
}

export enum LockStatus {
  ACTIVE = "ACTIVE",
  BLOCKED = "BLOCKED",
  DELETED = "DELETED",
  INACTIVE = "INACTIVE",
  UNVERIFIED = "UNVERIFIED",
}

export enum LogisticsStatusEnum {
  ACTIVE = "ACTIVE",
  DELETED = "DELETED",
  DRAFT = "DRAFT",
  INACTIVE = "INACTIVE",
}

export enum MallErrorCode {
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  HAS_TENANT = "HAS_TENANT",
  INVALID = "INVALID",
  NOT_FOUND = "NOT_FOUND",
  REQUIRED = "REQUIRED",
  UNIQUE = "UNIQUE",
}

export enum MallSortField {
  CODE = "CODE",
  CREATION_DATE = "CREATION_DATE",
  NAME = "NAME",
  NAME_AND_STATUS = "NAME_AND_STATUS",
  NUMBER = "NUMBER",
  STATUS = "STATUS",
}

export enum MenuErrorCode {
  CANNOT_ASSIGN_NODE = "CANNOT_ASSIGN_NODE",
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INVALID = "INVALID",
  INVALID_MENU_ITEM = "INVALID_MENU_ITEM",
  NOT_FOUND = "NOT_FOUND",
  NO_MENU_ITEM_PROVIDED = "NO_MENU_ITEM_PROVIDED",
  REQUIRED = "REQUIRED",
  TOO_MANY_MENU_ITEMS = "TOO_MANY_MENU_ITEMS",
  UNIQUE = "UNIQUE",
}

export enum VoucherConditionMetric {
  COMPLETED_ORDER = "COMPLETED_ORDER",
  REDEEMED_COUPON = "REDEEMED_COUPON",
}

export enum VoucherConditionOperation {
  EQ = "EQ",
  GE = "GE",
  GT = "GT",
  LE = "LE",
  LT = "LT",
}

export enum MenuSortField {
  ITEMS_COUNT = "ITEMS_COUNT",
  MENU_NAME = "NAME",
}

export enum MetadataErrorCode {
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INVALID = "INVALID",
  NOT_FOUND = "NOT_FOUND",
  REQUIRED = "REQUIRED",
}

export enum OTPErrorCode {
  BLOCKED = "BLOCKED",
  EXPIRED = "EXPIRED",
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INVALID = "INVALID",
  NOT_FOUND = "NOT_FOUND",
  REQUIRED = "REQUIRED",
  TOO_MANY_RESEND = "TOO_MANY_RESEND",
  UNIQUE = "UNIQUE",
  WRONG_PIN = "WRONG_PIN",
}

export enum OTPStatusEnum {
  EXP = "EXP",
  UNV = "UNV",
  VER = "VER",
}

export enum OrderAction {
  CAPTURE = "CAPTURE",
  MARK_AS_PAID = "MARK_AS_PAID",
  REFUND = "REFUND",
  VOID = "VOID",
}

export enum OrderBehavior {
  CASE_INSENSITIVE = "CASE_INSENSITIVE",
  CASE_SENSITIVE = "CASE_SENSITIVE",
}

export enum OrderDirection {
  ASC = "ASC",
  DESC = "DESC",
}

export enum OrderErrorCode {
  BILLING_ADDRESS_NOT_SET = "BILLING_ADDRESS_NOT_SET",
  CANNOT_CANCEL_FULFILLMENT = "CANNOT_CANCEL_FULFILLMENT",
  CANNOT_CANCEL_ORDER = "CANNOT_CANCEL_ORDER",
  CANNOT_DELETE = "CANNOT_DELETE",
  CANNOT_REFUND = "CANNOT_REFUND",
  CAPTURE_INACTIVE_PAYMENT = "CAPTURE_INACTIVE_PAYMENT",
  DUPLICATED_INPUT_ITEM = "DUPLICATED_INPUT_ITEM",
  FULFILL_ORDER_LINE = "FULFILL_ORDER_LINE",
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INSUFFICIENT_STOCK = "INSUFFICIENT_STOCK",
  INVALID = "INVALID",
  INVALID_GRAB_TOKEN = "INVALID_GRAB_TOKEN",
  NOT_EDITABLE = "NOT_EDITABLE",
  NOT_FOUND = "NOT_FOUND",
  ORDER_NO_SHIPPING_ADDRESS = "ORDER_NO_SHIPPING_ADDRESS",
  PAYMENT_ERROR = "PAYMENT_ERROR",
  PAYMENT_MISSING = "PAYMENT_MISSING",
  PRODUCT_NOT_PUBLISHED = "PRODUCT_NOT_PUBLISHED",
  PRODUCT_UNAVAILABLE_FOR_PURCHASE = "PRODUCT_UNAVAILABLE_FOR_PURCHASE",
  REQUIRED = "REQUIRED",
  SHIPPING_METHOD_NOT_APPLICABLE = "SHIPPING_METHOD_NOT_APPLICABLE",
  SHIPPING_METHOD_REQUIRED = "SHIPPING_METHOD_REQUIRED",
  TAX_ERROR = "TAX_ERROR",
  UNABLED_TO_CANCELED = "UNABLED_TO_CANCELED",
  UNABLED_TO_EDIT = "UNABLED_TO_EDIT",
  UNIQUE = "UNIQUE",
  VOID_INACTIVE_PAYMENT = "VOID_INACTIVE_PAYMENT",
  ZERO_QUANTITY = "ZERO_QUANTITY",
}

export enum OrderEventsEmailsEnum {
  DIGITAL_LINKS = "DIGITAL_LINKS",
  EVOUCHER_REDEMPTION = "EVOUCHER_REDEMPTION",
  FULFILLMENT_CONFIRMATION = "FULFILLMENT_CONFIRMATION",
  ORDER_CANCEL = "ORDER_CANCEL",
  ORDER_CONFIRMATION = "ORDER_CONFIRMATION",
  ORDER_REFUND = "ORDER_REFUND",
  PAYMENT_CONFIRMATION = "PAYMENT_CONFIRMATION",
  SHIPPING_CONFIRMATION = "SHIPPING_CONFIRMATION",
  TRACKING_UPDATED = "TRACKING_UPDATED",
}

export enum OrderEventsEnum {
  CANCELED = "CANCELED",
  CHANGE_REMITTANCE_MANUAL_ADJUSTMENT_STATUS = "CHANGE_REMITTANCE_MANUAL_ADJUSTMENT_STATUS",
  CREATE_REMITTANCE_MANUAL_ADJUSTMENT = "CREATE_REMITTANCE_MANUAL_ADJUSTMENT",
  DRAFT_ADDED_PRODUCTS = "DRAFT_ADDED_PRODUCTS",
  DRAFT_CREATED = "DRAFT_CREATED",
  DRAFT_REMOVED_PRODUCTS = "DRAFT_REMOVED_PRODUCTS",
  EMAIL_SENT = "EMAIL_SENT",
  EXTERNAL_SERVICE_NOTIFICATION = "EXTERNAL_SERVICE_NOTIFICATION",
  FULFILLMENT_CANCELED = "FULFILLMENT_CANCELED",
  FULFILLMENT_FULFILLED_ITEMS = "FULFILLMENT_FULFILLED_ITEMS",
  FULFILLMENT_RESTOCKED_ITEMS = "FULFILLMENT_RESTOCKED_ITEMS",
  INVOICE_GENERATED = "INVOICE_GENERATED",
  INVOICE_REQUESTED = "INVOICE_REQUESTED",
  INVOICE_SENT = "INVOICE_SENT",
  INVOICE_UPDATED = "INVOICE_UPDATED",
  NOTE_ADDED = "NOTE_ADDED",
  ORDER_2GO_BOOKING_SUCCESS = "ORDER_2GO_BOOKING_SUCCESS",
  ORDER_ASSIGNED_TO_RIDER = "ORDER_ASSIGNED_TO_RIDER",
  ORDER_BOOKED_GRAB_EXPRESS = "ORDER_BOOKED_GRAB_EXPRESS",
  ORDER_CANCELED_GRAB_EXPRESS = "ORDER_CANCELED_GRAB_EXPRESS",
  ORDER_FULFILLMENT_REMARKS = "ORDER_FULFILLMENT_REMARKS",
  ORDER_FULLY_PAID = "ORDER_FULLY_PAID",
  ORDER_MARKED_AS_COMPLETED = "ORDER_MARKED_AS_COMPLETED",
  ORDER_MARKED_AS_PACKED = "ORDER_MARKED_AS_PACKED",
  ORDER_MARKED_AS_PAID = "ORDER_MARKED_AS_PAID",
  ORDER_MARKED_AS_READY_TO_SHIP = "ORDER_MARKED_AS_READY_TO_SHIP",
  ORDER_MARKED_AS_SHIPPED = "ORDER_MARKED_AS_SHIPPED",
  ORDER_MARKED_AS_PICKED_UP_BY_COURIER = "ORDER_MARKED_AS_PICKED_UP_BY_COURIER",
  ORDER_MARKED_AS_RECEIVED_BY_COURIER = "ORDER_MARKED_AS_RECEIVED_BY_COURIER",
  ORDER_RETURNED_TO_FC = "ORDER_RETURNED_TO_FC",
  ORDER_UPDATED_RIDER_DETAILS = "ORDER_UPDATED_RIDER_DETAILS",
  ORDER_UPDATED_SHIPPING_LABEL = "ORDER_UPDATED_SHIPPING_LABEL",
  ORDER_2GO_BOOKING_FAILED = "ORDER_2GO_BOOKING_FAILED",
  OTHER = "OTHER",
  OVERSOLD_ITEMS = "OVERSOLD_ITEMS",
  PAYMENT_AUTHORIZED = "PAYMENT_AUTHORIZED",
  PAYMENT_CAPTURED = "PAYMENT_CAPTURED",
  PAYMENT_FAILED = "PAYMENT_FAILED",
  PAYMENT_FAILED_REFUND = "PAYMENT_FAILED_REFUND",
  PAYMENT_MANUAL_REFUND_NOTE = "PAYMENT_MANUAL_REFUND_NOTE",
  PAYMENT_REFUNDED = "PAYMENT_REFUNDED",
  PAYMENT_REFUND_REQUESTED = "PAYMENT_REFUND_REQUESTED",
  PAYMENT_VOIDED = "PAYMENT_VOIDED",
  PLACED = "PLACED",
  PLACED_FROM_DRAFT = "PLACED_FROM_DRAFT",
  RIDER_ARRIVED = "RIDER_ARRIVED",
  STORE_ORDER_ACKNOWLEDGED = "STORE_ORDER_ACKNOWLEDGED",
  STORE_ORDER_ADD_LINE = "STORE_ORDER_ADD_LINE",
  STORE_ORDER_ASSIGNED_TO_RIDER = "STORE_ORDER_ASSIGNED_TO_RIDER",
  STORE_ORDER_CANCELED = "STORE_ORDER_CANCELED",
  STORE_ORDER_CANCEL_REVERT = "STORE_ORDER_CANCEL_REVERT",
  STORE_ORDER_COLLECTED = "STORE_ORDER_COLLECTED",
  STORE_ORDER_COMPLETED = "STORE_ORDER_COMPLETED",
  STORE_ORDER_DELETE_LINE = "STORE_ORDER_DELETE_LINE",
  STORE_ORDER_DROPPED_OFF_BY_RUNNER = "STORE_ORDER_DROPPED_OFF_BY_RUNNER",
  STORE_ORDER_OVERRIDDEN_BY_RUNNER = "STORE_ORDER_OVERRIDDEN_BY_RUNNER",
  STORE_ORDER_OVERRIDE_ACKNOWLEDGED = "STORE_ORDER_OVERRIDE_ACKNOWLEDGED",
  STORE_ORDER_OVERRIDE_READY = "STORE_ORDER_OVERRIDE_READY",
  STORE_ORDER_PARCEL_NO_SET = "STORE_ORDER_PARCEL_NO_SET",
  STORE_ORDER_PICK_LINE = "STORE_ORDER_PICK_LINE",
  STORE_ORDER_READY = "STORE_ORDER_READY",
  STORE_ORDER_RECEIVED_AT_FC = "STORE_ORDER_RECEIVED_AT_FC",
  STORE_ORDER_SCANNED_BY_OMI_OPS = "STORE_ORDER_SCANNED_BY_OMI_OPS",
  STORE_ORDER_SCANNED_BY_RUNNER = "STORE_ORDER_SCANNED_BY_RUNNER",
  TRACKING_UPDATED = "TRACKING_UPDATED",
  UPDATED_ADDRESS = "UPDATED_ADDRESS",
  ORDER_AUTOBOOKING_CANCELLED = "ORDER_AUTOBOOKING_CANCELLED",
  ORDER_GRAB_BOOKING_CANCELED = "ORDER_GRAB_BOOKING_CANCELED",
  ORDER_AUTOBOOKING_FAILED = "ORDER_AUTOBOOKING_FAILED",
  ORDER_BOOKED_PANDAGO_AUTO = "ORDER_BOOKED_PANDAGO_AUTO",
  ORDER_PANDAGO_BOOKING_CANCELED = "ORDER_PANDAGO_BOOKING_CANCELED",
  ORDER_PANDAGO_RETURNED_TO_VENDOR = "ORDER_PANDAGO_RETURNED_TO_VENDOR",
  REMITTANCE_MANUAL_OVERRIDE = "REMITTANCE_MANUAL_OVERRIDE",
}

export interface VoucherConditionInput {
  metric: DiscountMetricEnum;
  operation: DiscountOperationEnum;
  value: number;
}

export enum OrderLineStatusEnum {
  OUT_OF_STOCK = "OUT_OF_STOCK",
  PENDING = "PENDING",
  PICKED = "PICKED",
  PICKING = "PICKING",
  READY_FOR_PICKUP = "READY_FOR_PICKUP",
  READY_TO_SHIP = "READY_TO_SHIP",
  RECEIVED_IN_WAREHOUSE = "RECEIVED_IN_WAREHOUSE",
}

export enum OrderSortField {
  CREATION_DATE = "CREATION_DATE",
  CUSTOMER = "CUSTOMER",
  FULFILLMENT_STATUS = "FULFILLMENT_STATUS",
  NUMBER = "NUMBER",
  PAYMENT = "PAYMENT",
  TOTAL = "TOTAL",
}

export enum OrderStatus {
  CANCELED = "CANCELED",
  DRAFT = "DRAFT",
  FULFILLED = "FULFILLED",
  PARTIALLY_FULFILLED = "PARTIALLY_FULFILLED",
  UNFULFILLED = "UNFULFILLED",
}

export enum OrderStatusFilter {
  CANCELED = "CANCELED",
  FULFILLED = "FULFILLED",
  PARTIALLY_FULFILLED = "PARTIALLY_FULFILLED",
  READY_TO_CAPTURE = "READY_TO_CAPTURE",
  READY_TO_FULFILL = "READY_TO_FULFILL",
  UNFULFILLED = "UNFULFILLED",
}

export enum OrderVerticalType {
  FOOD_AND_BEVERAGES = "FOOD_AND_BEVERAGES",
  GENERAL_MERCHANDISE = "GENERAL_MERCHANDISE",
  GROCERY = "GROCERY",
  SM_FULFILLED = "SM_FULFILLED",
}

export enum PageErrorCode {
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INVALID = "INVALID",
  NOT_FOUND = "NOT_FOUND",
  REQUIRED = "REQUIRED",
  UNIQUE = "UNIQUE",
}

export enum PageSortField {
  CREATION_DATE = "CREATION_DATE",
  PUBLICATION_DATE = "PUBLICATION_DATE",
  SLUG = "SLUG",
  TITLE = "TITLE",
  VISIBILITY = "VISIBILITY",
}

export enum PageTypeEnum {
  CINEMA = "CINEMA",
  DISCOUNTS = "DISCOUNTS",
  FOOD = "FOOD",
  GROCERY = "GROCERY",
  SHOPS = "SHOPS",
  SM_FULFILLED = "SM_FULFILLED",
}

export enum PayableStatusEnum {
  PAID = "PAID",
  REJECTED = "REJECTED",
}

export enum PaymentChannelCodeEnum {
  BPI = "BPI",
  CHINABANK = "CHINABANK",
  GRABPAY = "GRABPAY",
  PAYMAYA = "PAYMAYA",
  RCBC = "RCBC",
  SHOPEEPAY = "SHOPEEPAY",
  UBP = "UBP",
}

export enum PaymentChargeStatusEnum {
  CANCELLED = "CANCELLED",
  FULLY_CHARGED = "FULLY_CHARGED",
  FULLY_REFUNDED = "FULLY_REFUNDED",
  NOT_CHARGED = "NOT_CHARGED",
  PARTIALLY_CHARGED = "PARTIALLY_CHARGED",
  PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
  PENDING = "PENDING",
  REFUND_REQUESTED = "REFUND_REQUESTED",
  REFUSED = "REFUSED",
}

export enum PaymentGatewayEnum {
  CARD = "CARD",
  EWALLET = "EWALLET",
  GCASH = "GCASH",
  ONLINEBANKING = "ONLINEBANKING",
}

export enum PayoutBatchTaskStatus {
  FAILED = "FAILED",
  IN_PROGRESS = "IN_PROGRESS",
  SUCCESS = "SUCCESS",
}

export enum PayoutStatusEnum {
  COMPLETED = "COMPLETED",
  FOR_PAYMENT = "FOR_PAYMENT",
  ON_PROCESS = "ON_PROCESS",
  OPEN_ORDER = "OPEN_ORDER",
  PAYMENT_INITIATED = "PAYMENT_INITIATED",
  PAYMENT_PROCESSING = "PAYMENT_PROCESSING",
  READY_FOR_PAYMENT = "READY_FOR_PAYMENT",
  RETURNED = "RETURNED",
  SCHEDULE_FOR_PAYOUT = "SCHEDULE_FOR_PAYOUT",
}

export enum PermissionEnum {
  APPROVE_BATCH = "APPROVE_BATCH",
  CREATE_BATCH = "CREATE_BATCH",
  GENERATE_BANK_FILE = "GENERATE_BANK_FILE",
  GENERATE_PAYABLE_LIST = "GENERATE_PAYABLE_LIST",
  MANAGE_ACCESS = "MANAGE_ACCESS",
  MANAGE_ACCOUNT_SETTINGS = "MANAGE_ACCOUNT_SETTINGS",
  MANAGE_ANNOUNCEMENTS = "MANAGE_ANNOUNCEMENTS",
  MANAGE_APPS = "MANAGE_APPS",
  MANAGE_APP_CONFIGS = "MANAGE_APP_CONFIGS",
  MANAGE_BANNERS = "MANAGE_BANNERS",
  MANAGE_BATCH = "MANAGE_BATCH",
  MANAGE_BATCH_HISTORY = "MANAGE_BATCH_HISTORY",
  MANAGE_BRANDS = "MANAGE_BRANDS",
  MANAGE_BRAND_DETAILS = "MANAGE_BRAND_DETAILS",
  MANAGE_BUSINESS_DETAILS = "MANAGE_BUSINESS_DETAILS",
  MANAGE_CATEGORIES = "MANAGE_CATEGORIES",
  MANAGE_CHECKOUTS = "MANAGE_CHECKOUTS",
  MANAGE_CLUSTERS = "MANAGE_CLUSTERS",
  MANAGE_COLLECTIONS = "MANAGE_COLLECTIONS",
  MANAGE_COUPONS = "MANAGE_COUPONS",
  MANAGE_DISCOUNTS = "MANAGE_DISCOUNTS",
  MANAGE_FINANCE = "MANAGE_FINANCE",
  MANAGE_GIFT_CARD = "MANAGE_GIFT_CARD",
  MANAGE_HOME_LOCATIONS = "MANAGE_HOME_LOCATIONS",
  MANAGE_MALLS = "MANAGE_MALLS",
  MANAGE_MENUS = "MANAGE_MENUS",
  MANAGE_ORDER_TIMEFRAME = "MANAGE_ORDER_TIMEFRAME",
  MANAGE_ORDERS = "MANAGE_ORDERS",
  MANAGE_PAGES = "MANAGE_PAGES",
  MANAGE_PAYOUT = "MANAGE_PAYOUT",
  MANAGE_PAYOUT_ON_PROCESS = "MANAGE_PAYOUT_ON_PROCESS",
  MANAGE_PAYOUT_OPEN_ORDER = "MANAGE_PAYOUT_OPEN_ORDER",
  MANAGE_PAYOUT_PAYABLES = "MANAGE_PAYOUT_PAYABLES",
  MANAGE_PAYOUT_PAYMENT = "MANAGE_PAYOUT_PAYMENT",
  MANAGE_PLUGINS = "MANAGE_PLUGINS",
  MANAGE_PRODUCTS = "MANAGE_PRODUCTS",
  MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES = "MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES",
  MANAGE_PRODUCT_VISIBILITY = "MANAGE_PRODUCT_VISIBILITY",
  MANAGE_REMITTANCE = "MANAGE_REMITTANCE",
  MANAGE_REMITTANCE_CONFIG = "MANAGE_REMITTANCE_CONFIG",
  MANAGE_REPORTS = "MANAGE_REPORTS",
  MANAGE_SALES = "MANAGE_SALES",
  MANAGE_SELLER_ORDER_REPORTS = "MANAGE_SELLER_ORDER_REPORTS",
  MANAGE_SERVICE_ACCOUNTS = "MANAGE_SERVICE_ACCOUNTS",
  MANAGE_SETTINGS = "MANAGE_SETTINGS",
  MANAGE_SETTLEMENT = "MANAGE_SETTLEMENT",
  MANAGE_SHIPMENTS = "MANAGE_SHIPMENTS",
  MANAGE_SHIPPING = "MANAGE_SHIPPING",
  MANAGE_SHOPIFY = "MANAGE_SHOPIFY",
  MANAGE_STAFF = "MANAGE_STAFF",
  MANAGE_STORE_ORDERS = "MANAGE_STORE_ORDERS",
  MANAGE_STORE_SALES = "MANAGE_STORE_SALES",
  MANAGE_TASK_AREAS = "MANAGE_TASK_AREAS",
  MANAGE_AUTO_BOOKING = "MANAGE_AUTO_BOOKING",
  MANAGE_TENANTS = "MANAGE_TENANTS",
  MANAGE_TRANSLATIONS = "MANAGE_TRANSLATIONS",
  MANAGE_USERS = "MANAGE_USERS",
  MANAGE_USER_TYPES = "MANAGE_USER_TYPES",
  MANAGE_VOUCHERS = "MANAGE_VOUCHERS",
  REJECT_BATCH = "REJECT_BATCH",
  ADD_COUPON = "ADD_COUPON",
  CHANGE_COUPON = "CHANGE_COUPON",
  VIEW_COUPON_REDEMPTION = "VIEW_COUPON_REDEMPTION",
  FEATURE_COUPONS = "FEATURE_COUPONS",
  VIEW_ADMIN_FULFILLMENT = "VIEW_ADMIN_FULFILLMENT",
  VIEW_ADMIN_DISPATCH = "VIEW_ADMIN_DISPATCH",
  VIEW_ADMIN_ORDERS = "VIEW_ADMIN_ORDERS",
  VIEW_ADMIN_DROP_OFF = "VIEW_ADMIN_DROP_OFF",
  VIEW_MASTER_FULFILLMENT = "VIEW_MASTER_FULFILLMENT",
  VIEW_ALL_MALLS = "VIEW_ALL_MALLS",
  MANAGE_ALL_MALLS = "MANAGE_ALL_MALLS",
  MANAGE_REMITTANCE_OVERRIDE = "MANAGE_REMITTANCE_OVERRIDE",
}

export enum PermissionGroupErrorCode {
  ASSIGN_NON_STAFF_MEMBER = "ASSIGN_NON_STAFF_MEMBER",
  CANNOT_ORPHAN_USERS = "CANNOT_ORPHAN_USERS",
  CANNOT_REMOVE_FROM_LAST_GROUP = "CANNOT_REMOVE_FROM_LAST_GROUP",
  DUPLICATED_INPUT_ITEM = "DUPLICATED_INPUT_ITEM",
  GROUP_LOCKED = "GROUP_LOCKED",
  LEFT_NOT_MANAGEABLE_PERMISSION = "LEFT_NOT_MANAGEABLE_PERMISSION",
  OUT_OF_SCOPE_PERMISSION = "OUT_OF_SCOPE_PERMISSION",
  OUT_OF_SCOPE_USER = "OUT_OF_SCOPE_USER",
  REQUIRED = "REQUIRED",
  UNIQUE = "UNIQUE",
}

export enum PermissionGroupSortField {
  PERMISSION_GROUP_NAME = "PERMISSION_GROUP_NAME",
}

export enum PluginErrorCode {
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INVALID = "INVALID",
  NOT_FOUND = "NOT_FOUND",
  PLUGIN_MISCONFIGURED = "PLUGIN_MISCONFIGURED",
  REQUIRED = "REQUIRED",
  UNIQUE = "UNIQUE",
}

export enum PluginSortField {
  IS_ACTIVE = "IS_ACTIVE",
  NAME = "NAME",
}

export enum ProductErrorCode {
  ALREADY_EXISTS = "ALREADY_EXISTS",
  ATTRIBUTE_ALREADY_ASSIGNED = "ATTRIBUTE_ALREADY_ASSIGNED",
  ATTRIBUTE_CANNOT_BE_ASSIGNED = "ATTRIBUTE_CANNOT_BE_ASSIGNED",
  ATTRIBUTE_VARIANTS_DISABLED = "ATTRIBUTE_VARIANTS_DISABLED",
  DUPLICATED_INPUT_ITEM = "DUPLICATED_INPUT_ITEM",
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  HAS_ACTIVE_SALE = "HAS_ACTIVE_SALE",
  HAS_SCHEDULED_SALE = "HAS_SCHEDULED_SALE",
  INVALID = "INVALID",
  NOT_ACCESSIBLE = "NOT_ACCESSIBLE",
  NOT_FOUND = "NOT_FOUND",
  NOT_PRODUCTS_IMAGE = "NOT_PRODUCTS_IMAGE",
  NOT_PRODUCTS_VARIANT = "NOT_PRODUCTS_VARIANT",
  REQUIRED = "REQUIRED",
  UNIQUE = "UNIQUE",
  UNSUPPORTED_FILE_TYPE = "UNSUPPORTED_FILE_TYPE",
  VARIANT_NO_DIGITAL_CONTENT = "VARIANT_NO_DIGITAL_CONTENT",
}

export enum ProductFieldEnum {
  AVAILABLE_FOR_PURCHASE = "AVAILABLE_FOR_PURCHASE",
  CATEGORY = "CATEGORY",
  CHARGE_TAXES = "CHARGE_TAXES",
  COLLECTIONS = "COLLECTIONS",
  COST_PRICE = "COST_PRICE",
  DESCRIPTION = "DESCRIPTION",
  NAME = "NAME",
  PRODUCT_IMAGES = "PRODUCT_IMAGES",
  PRODUCT_STATUS = "PRODUCT_STATUS",
  PRODUCT_TYPE = "PRODUCT_TYPE",
  PRODUCT_WEIGHT = "PRODUCT_WEIGHT",
  SEARCHABLE = "SEARCHABLE",
  VARIANT_IMAGES = "VARIANT_IMAGES",
  VARIANT_PRICE = "VARIANT_PRICE",
  VARIANT_SKU = "VARIANT_SKU",
  VARIANT_WEIGHT = "VARIANT_WEIGHT",
  VISIBLE = "VISIBLE",
}

export enum ProductOrderField {
  DATE = "DATE",
  DISCOUNT_AMOUNT = "DISCOUNT_AMOUNT",
  DISCOUNT_PERCENTAGE = "DISCOUNT_PERCENTAGE",
  MALL_DISTANCE = "MALL_DISTANCE",
  MINIMAL_PRICE = "MINIMAL_PRICE",
  MOST_POPULAR = "MOST_POPULAR",
  NAME = "NAME",
  PRICE = "PRICE",
  PUBLICATION_DATE = "PUBLICATION_DATE",
  PUBLISHED = "PUBLISHED",
  SELLING_PRICE = "SELLING_PRICE",
  TYPE = "TYPE",
}

export enum ProductStatusEnum {
  DELETED = "DELETED",
  DRAFT = "DRAFT",
  READY = "READY",
  UNLISTED = "UNLISTED",
}

export enum ProductTemplateEnum {
  IMAGES_AND_DESCRIPTIONS = "IMAGES_AND_DESCRIPTIONS",
  INVENTORY_AND_STATUS = "INVENTORY_AND_STATUS",
  LIST = "LIST",
  PRICES = "PRICES",
  RETAIL_AND_SELLING_PRICE = "RETAIL_AND_SELLING_PRICE",
  SEO_INFORMATION_IMAGES = "SEO_INFORMATION_IMAGES",
}

export enum ProductTypeConfigurable {
  CONFIGURABLE = "CONFIGURABLE",
  SIMPLE = "SIMPLE",
}

export enum ProductTypeEnum {
  DIGITAL = "DIGITAL",
  SHIPPABLE = "SHIPPABLE",
}

export enum ProductTypeSortField {
  DIGITAL = "DIGITAL",
  NAME = "NAME",
  SHIPPING_REQUIRED = "SHIPPING_REQUIRED",
}

export enum ProductUploadTemplateTypeEnum {
  INVENTORY_UPDATE = "INVENTORY_UPDATE",
  PRICE_UPDATE = "PRICE_UPDATE",
  PRODUCT_DETAILS_UPDATE = "PRODUCT_DETAILS_UPDATE",
  PRODUCT_FILE = "PRODUCT_FILE",
  SALES_MERCHANT_ABSOLUTE_VALUE_PRODUCT = "SALES_MERCHANT_ABSOLUTE_VALUE_PRODUCT",
  SALES_MERCHANT_PERCENTAGE_PRODUCT = "SALES_MERCHANT_PERCENTAGE_PRODUCT",
  SALES_PARTNERSHIP_ABSOLUTE_VALUE_PRODUCT = "SALES_PARTNERSHIP_ABSOLUTE_VALUE_PRODUCT",
  SALES_PARTNERSHIP_PERCENTAGE_PRODUCT = "SALES_PARTNERSHIP_PERCENTAGE_PRODUCT",
}

export enum ProductUserViewEnum {
  SELLER_MASTER = "SELLER_MASTER",
  STORE_ADMIN = "STORE_ADMIN",
}

export enum PurchaseHistoryType {
  FIRST_ORDER = "FIRST_ORDER",
  SUCCEEDING_ORDER = "SUCCEEDING_ORDER",
}

export enum RemittanceErrorCode {
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INVALID = "INVALID",
  INVALID_REMITTANCE = "INVALID_REMITTANCE",
  NOT_FOUND = "NOT_FOUND",
  REQUIRED = "REQUIRED",
  UNIQUE = "UNIQUE",
}

export enum RemittanceEventTypeEnum {
  REMITTED = "REMITTED",
  TO_REMIT = "TO_REMIT",
  CANCELLED = "CANCELLED",
  PROCESSING = "PROCESSING",
}

export enum RemittanceManualAdjustmentStatusEnum {
  UNASSIGNED = "UNASSIGNED",
  FOR_ADJUSTMENT = "FOR_ADJUSTMENT",
  COMPLETED = "COMPLETED",
}

export enum RemittanceNotifTimeEnum {
  UTC_00_00 = "UTC_00_00",
  UTC_01_00 = "UTC_01_00",
  UTC_02_00 = "UTC_02_00",
  UTC_03_00 = "UTC_03_00",
  UTC_04_00 = "UTC_04_00",
  UTC_05_00 = "UTC_05_00",
  UTC_06_00 = "UTC_06_00",
  UTC_07_00 = "UTC_07_00",
  UTC_08_00 = "UTC_08_00",
  UTC_09_00 = "UTC_09_00",
  UTC_10_00 = "UTC_10_00",
  UTC_11_00 = "UTC_11_00",
  UTC_12_00 = "UTC_12_00",
  UTC_13_00 = "UTC_13_00",
  UTC_14_00 = "UTC_14_00",
  UTC_15_00 = "UTC_15_00",
  UTC_16_00 = "UTC_16_00",
  UTC_17_00 = "UTC_17_00",
  UTC_18_00 = "UTC_18_00",
  UTC_19_00 = "UTC_19_00",
  UTC_20_00 = "UTC_20_00",
  UTC_21_00 = "UTC_21_00",
  UTC_22_00 = "UTC_22_00",
  UTC_23_00 = "UTC_23_00",
}

export enum RemittanceStatusEnum {
  FOR_BANK_CONFIRMATION = "FOR_BANK_CONFIRMATION",
  REMITTED = "REMITTED",
  TO_REMIT = "TO_REMIT",
}

export enum RemittanceOrderSortField {
  CREATED_DATE = "CREATED_DATE",
}

export enum RemittanceSortField {
  CREATION_DATE = "CREATION_DATE",
  STATUS = "STATUS",
}

export enum RiderDispatchBatchSortField {
  CREATION_DATE = "CREATION_DATE",
  NUMBER = "NUMBER",
}

export enum SaleSortField {
  END_DATE = "END_DATE",
  NAME = "NAME",
  START_DATE = "START_DATE",
  TYPE = "TYPE",
  SALE_VALUE = "VALUE",
}

export enum SaleType {
  ABSOLUTE_VALUE = "ABSOLUTE_VALUE",
  FIXED = "FIXED",
  PERCENTAGE = "PERCENTAGE",
}

export enum ServerErrorCode {
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INVALID = "INVALID",
  NOT_FOUND = "NOT_FOUND",
  REQUIRED = "REQUIRED",
  UNIQUE = "UNIQUE",
}

export enum SettlementStatusEnum {
  COPIED = "COPIED",
  EXCLUDED = "EXCLUDED",
  FOR_PAYMENT = "FOR_PAYMENT",
  OPEN = "OPEN",
  REOPENED = "REOPENED",
}

export enum ShippingErrorCode {
  ALREADY_EXISTS = "ALREADY_EXISTS",
  DUPLICATED_INPUT_ITEM = "DUPLICATED_INPUT_ITEM",
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INVALID = "INVALID",
  MAX_LESS_THAN_MIN = "MAX_LESS_THAN_MIN",
  NOT_FOUND = "NOT_FOUND",
  REQUIRED = "REQUIRED",
  UNIQUE = "UNIQUE",
}

export enum ShippingMethodTypeEnum {
  LOCATION = "LOCATION",
  PRICE = "PRICE",
  WEIGHT = "WEIGHT",
}

export enum ShippingMethodStatus {
  ACT = "ACT",
  INACTIVE = "INACTIVE",
}

export enum ShopErrorCode {
  ALREADY_EXISTS = "ALREADY_EXISTS",
  CANNOT_FETCH_TAX_RATES = "CANNOT_FETCH_TAX_RATES",
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INVALID = "INVALID",
  NOT_FOUND = "NOT_FOUND",
  REQUIRED = "REQUIRED",
  UNIQUE = "UNIQUE",
}

export enum ShopifyErrorCode {
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INVALID = "INVALID",
  REQUIRED = "REQUIRED",
}

export enum ShopifyTagEnum {
  EXCLUSION = "EXCLUSION",
  NON_COD = "NON_COD",
}

export enum SmopBannerTypeEnum {
  ANNOUNCEMENT = "ANNOUNCEMENT",
  SALE = "SALE",
  VOUCHER = "VOUCHER",
}

export enum SmopOpStatusEnum {
  CLS = "CLS",
  OPN = "OPN",
}

export enum SmopOrderStatusEnum {
  ACKNOWLEDGED = "ACKNOWLEDGED",
  CANCELED = "CANCELED",
  COLLECTED = "COLLECTED",
  COMPLETED = "COMPLETED",
  NEW_ORDER = "NEW_ORDER",
  PACKED = "PACKED",
  READY = "READY",
  READY_TO_SHIP = "READY_TO_SHIP",
  RECEIVED_AT_FC = "RECEIVED_AT_FC",
  RETURN_TO_FC = "RETURN_TO_FC",
  SHIPPED = "SHIPPED",
}

export enum SmopRentalTypeEnum {
  FIXED = "FIXED",
  PERCENTAGE = "PERCENTAGE",
}

export enum SmopStatusEnum {
  ACT = "ACT",
  DCL = "DCL",
  DEL = "DEL",
  INA = "INA",
  RVW = "RVW",
}

export enum SmopUserTypeCode {
  ACCOUNT_MANAGER = "ACCOUNT_MANAGER",
  ACQUISITION = "ACQUISITION",
  CUSTOMER = "CUSTOMER",
  FINANCE = "FINANCE",
  FINANCE_MANAGER = "FINANCE_MANAGER",
  FINANCE_SPECIALIST = "FINANCE_SPECIALIST",
  FINANCE_TREASURY_1 = "FINANCE_TREASURY_1",
  FINANCE_TREASURY_2 = "FINANCE_TREASURY_2",
  MALL_ADMIN = "MALL_ADMIN",
  MARKETING = "MARKETING",
  OMI_ADMIN = "OMI_ADMIN",
  OMI_FINANCE = "OMI_FINANCE",
  OMI_OPS = "OMI_OPS",
  RIDER = "RIDER",
  RUNNER = "RUNNER",
  SELLER_MASTER = "SELLER_MASTER",
  STORE_ADMIN = "STORE_ADMIN",
}

export enum StaffPromoCreatorEnum {
  APP_DEVELOPMENT = "APP_DEVELOPMENT",
  MALL_MARKETING = "MALL_MARKETING",
  SMO_MARKETING = "SMO_MARKETING",
}

export enum StockAvailability {
  IN_STOCK = "IN_STOCK",
  OUT_OF_STOCK = "OUT_OF_STOCK",
}

export enum StockErrorCode {
  ALREADY_EXISTS = "ALREADY_EXISTS",
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INVALID = "INVALID",
  NOT_FOUND = "NOT_FOUND",
  REQUIRED = "REQUIRED",
  UNIQUE = "UNIQUE",
}

export enum StoreOrderSortField {
  CREATION_DATE = "CREATION_DATE",
  NUMBER = "NUMBER",
  REMAINING_PREP_TIME = "REMAINING_PREP_TIME",
}

export enum StoreTypeEnum {
  FOOD_AND_BEVERAGES = "FOOD_AND_BEVERAGES",
  GENERAL_MERCHANDISE = "GENERAL_MERCHANDISE",
  GROCERY = "GROCERY",
  SM_FULFILLED = "SM_FULFILLED",
}

export enum SubTenantTypeEnum {
  FOOD_COURT = "FOOD_COURT",
  NON_FOOD_COURT = "NON_FOOD_COURT",
}

export enum TaxRateType {
  ACCOMMODATION = "ACCOMMODATION",
  ADMISSION_TO_CULTURAL_EVENTS = "ADMISSION_TO_CULTURAL_EVENTS",
  ADMISSION_TO_ENTERTAINMENT_EVENTS = "ADMISSION_TO_ENTERTAINMENT_EVENTS",
  ADMISSION_TO_SPORTING_EVENTS = "ADMISSION_TO_SPORTING_EVENTS",
  ADVERTISING = "ADVERTISING",
  AGRICULTURAL_SUPPLIES = "AGRICULTURAL_SUPPLIES",
  BABY_FOODSTUFFS = "BABY_FOODSTUFFS",
  BIKES = "BIKES",
  BOOKS = "BOOKS",
  CHILDRENS_CLOTHING = "CHILDRENS_CLOTHING",
  DOMESTIC_FUEL = "DOMESTIC_FUEL",
  DOMESTIC_SERVICES = "DOMESTIC_SERVICES",
  E_BOOKS = "E_BOOKS",
  FOODSTUFFS = "FOODSTUFFS",
  HOTELS = "HOTELS",
  MEDICAL = "MEDICAL",
  NEWSPAPERS = "NEWSPAPERS",
  PASSENGER_TRANSPORT = "PASSENGER_TRANSPORT",
  PHARMACEUTICALS = "PHARMACEUTICALS",
  PROPERTY_RENOVATIONS = "PROPERTY_RENOVATIONS",
  RESTAURANTS = "RESTAURANTS",
  SOCIAL_HOUSING = "SOCIAL_HOUSING",
  STANDARD = "STANDARD",
  WATER = "WATER",
  WINE = "WINE",
}

export enum TemplateStatus {
  ACTIVE = "ACTIVE",
  DELETED = "DELETED",
  DRAFT = "DRAFT",
  INACTIVE = "INACTIVE",
}

export enum TemplateStatusEnum {
  ACTIVE = "ACTIVE",
  DELETED = "DELETED",
  DRAFT = "DRAFT",
  INACTIVE = "INACTIVE",
}

export enum TenantErrorCode {
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INVALID = "INVALID",
  NOT_FOUND = "NOT_FOUND",
  REQUIRED = "REQUIRED",
  UNIQUE = "UNIQUE",
}

export enum TenantSortField {
  CREATION_DATE = "CREATION_DATE",
  MALL_DISTANCE = "MALL_DISTANCE",
  MOST_POPULAR = "MOST_POPULAR",
  NAME = "NAME",
  NAME_WITH_FEATURED = "NAME_WITH_FEATURED",
  NUMBER = "NUMBER",
}

export enum TransactionStatusEnum {
  FAILED = "FAILED",
  SUCCESS = "SUCCESS",
}

export enum UserSortField {
  EMAIL = "EMAIL",
  FIRST_NAME = "FIRST_NAME",
  LAST_NAME = "LAST_NAME",
  ORDER_COUNT = "ORDER_COUNT",
}

export enum VoucherClassificationEnum {
  ALL = "ALL",
  FOOD_AND_BEVERAGES = "FOOD_AND_BEVERAGES",
  GENERAL_MERCHANDISE = "GENERAL_MERCHANDISE",
  GROCERY = "GROCERY",
  SM_FULFILLED = "SM_FULFILLED",
}

export enum VoucherDiscountType {
  E_VOUCHER = "E_VOUCHER",
  FIXED = "FIXED",
  PERCENTAGE = "PERCENTAGE",
  PERCENTAGE_AND_CAPPED = "PERCENTAGE_AND_CAPPED",
  SHIPPING = "SHIPPING",
}

export enum VoucherGroupSortField {
  CODE = "CODE",
  CREATE_DATE = "CREATE_DATE",
  DELETE_DATE = "DELETE_DATE",
  UPDATE_DATE = "UPDATE_DATE",
}

export enum VoucherSortField {
  APPLICABILITY = "APPLICABILITY",
  CODE = "CODE",
  CREATION_DATE = "CREATION_DATE",
  END_DATE = "END_DATE",
  MINIMUM_SPENT_AMOUNT = "MINIMUM_SPENT_AMOUNT",
  START_DATE = "START_DATE",
  TYPE = "TYPE",
  USAGE_LIMIT = "USAGE_LIMIT",
  VOUCHER_VALUE = "VALUE",
}

export enum VoucherTypeEnum {
  ENTIRE_ORDER = "ENTIRE_ORDER",
  E_VOUCHER = "E_VOUCHER",
  SHIPPING = "SHIPPING",
  SPECIFIC_PRODUCT = "SPECIFIC_PRODUCT",
}

export enum WarehouseErrorCode {
  ALREADY_EXISTS = "ALREADY_EXISTS",
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INVALID = "INVALID",
  NOT_FOUND = "NOT_FOUND",
  REQUIRED = "REQUIRED",
  UNIQUE = "UNIQUE",
}

export enum WarehouseSortField {
  WAREHOUSE_NAME = "WAREHOUSE_NAME",
}

export enum WebhookErrorCode {
  GRAPHQL_ERROR = "GRAPHQL_ERROR",
  INVALID = "INVALID",
  NOT_FOUND = "NOT_FOUND",
  REQUIRED = "REQUIRED",
  UNIQUE = "UNIQUE",
}

export enum WebhookEventTypeEnum {
  ANY_EVENTS = "ANY_EVENTS",
  CHECKOUT_CREATED = "CHECKOUT_CREATED",
  CHECKOUT_QUANTITY_CHANGED = "CHECKOUT_QUANTITY_CHANGED",
  CHECKOUT_UPDATED = "CHECKOUT_UPDATED",
  CUSTOMER_CREATED = "CUSTOMER_CREATED",
  FULFILLMENT_CREATED = "FULFILLMENT_CREATED",
  INVOICE_DELETED = "INVOICE_DELETED",
  INVOICE_REQUESTED = "INVOICE_REQUESTED",
  INVOICE_SENT = "INVOICE_SENT",
  ORDER_CANCELLED = "ORDER_CANCELLED",
  ORDER_CREATED = "ORDER_CREATED",
  ORDER_FULFILLED = "ORDER_FULFILLED",
  ORDER_FULLY_PAID = "ORDER_FULLY_PAID",
  ORDER_UPDATED = "ORDER_UPDATED",
  PRODUCT_CREATED = "PRODUCT_CREATED",
  PRODUCT_UPDATED = "PRODUCT_UPDATED",
}

export enum WebhookSortField {
  APP = "APP",
  WEBHOOK_NAME = "WEBHOOK_NAME",
  SERVICE_ACCOUNT = "SERVICE_ACCOUNT",
  TARGET_URL = "TARGET_URL",
}

export enum WeightUnitsEnum {
  G = "G",
  KG = "KG",
  LB = "LB",
  OZ = "OZ",
}

export interface AccessGroupUpdateInput {
  name: string | null;
  code: string | null;
  description: string | null;
}

export interface ActivityLogSortingInput {
  direction: OrderDirection;
  behavior?: OrderBehavior | null;
  field: ActivityLogSortField;
}

export interface AddressInput {
  firstName?: string | null;
  lastName?: string | null;
  companyName?: string | null;
  streetAddress1?: string | null;
  streetAddress2?: string | null;
  city?: string | null;
  cityArea?: string | null;
  postalCode?: string | null;
  country?: CountryCode | null;
  countryArea?: string | null;
  phone?: string | null;
  longitude?: any | null;
  latitude?: any | null;
  mapPlaceId?: string | null;
  alias?: string | null;
  notes?: string | null;
  unitDetails?: string | null;
  streetBrgy?: string | null;
  landmark?: string | null;
  provinceCode?: string | null;
  provinceName?: string | null;
}

export interface AnnouncementCreateInput {
  title: string;
  content: string;
  image?: any | null;
  startDate: any;
  endDate: any;
}

export interface AnnouncementInput {
  search?: string | null;
  startDate?: DateTimeRangeInput | null;
  status?: AnnouncementPublishingStatusEnum | null;
  id?: (string | null)[] | null;
}

export interface AnnouncementSortingInput {
  direction: OrderDirection;
  field: AnnouncementSortField;
}

export interface AppConfigInput {
  search?: string | null;
  version?: string | null;
  createdBy?: (string | null)[] | null;
  unique?: boolean | null;
}

export interface AppConfigSortingInput {
  direction: OrderDirection;
  field: AppConfigOrderField;
}

export interface AppFilterInput {
  search?: string | null;
  isActive?: boolean | null;
  type?: AppTypeEnum | null;
}

export interface AppInput {
  name?: string | null;
  isActive?: boolean | null;
  permissions?: (PermissionEnum | null)[] | null;
}

export interface AppInstallInput {
  appName?: string | null;
  manifestUrl?: string | null;
  activateAfterInstallation?: boolean | null;
  permissions?: (PermissionEnum | null)[] | null;
}

export interface AppSortingInput {
  direction: OrderDirection;
  field: AppSortField;
}

export interface AppTokenInput {
  name?: string | null;
  app: string;
}

export interface AttributeAssignInput {
  id: string;
  type: AttributeTypeEnum;
}

export interface AttributeCreateInput {
  inputType?: AttributeInputTypeEnum | null;
  name: string;
  slug?: string | null;
  values?: (AttributeValueCreateInput | null)[] | null;
  valueRequired?: boolean | null;
  isVariantOnly?: boolean | null;
  visibleInStorefront?: boolean | null;
  filterableInStorefront?: boolean | null;
  filterableInDashboard?: boolean | null;
  storefrontSearchPosition?: number | null;
  availableInGrid?: boolean | null;
}

export interface AttributeFilterInput {
  valueRequired?: boolean | null;
  isVariantOnly?: boolean | null;
  visibleInStorefront?: boolean | null;
  filterableInStorefront?: boolean | null;
  filterableInDashboard?: boolean | null;
  availableInGrid?: boolean | null;
  search?: string | null;
  ids?: (string | null)[] | null;
  inCollection?: string | null;
  inCategory?: string | null;
}

export interface AttributeInput {
  slug: string;
  value?: string | null;
  values?: (string | null)[] | null;
}

export interface AttributeSortingInput {
  direction: OrderDirection;
  field: AttributeSortField;
}

export interface AttributeUpdateInput {
  name?: string | null;
  slug?: string | null;
  removeValues?: (string | null)[] | null;
  addValues?: (AttributeValueCreateInput | null)[] | null;
  valueRequired?: boolean | null;
  isVariantOnly?: boolean | null;
  visibleInStorefront?: boolean | null;
  filterableInStorefront?: boolean | null;
  filterableInDashboard?: boolean | null;
  storefrontSearchPosition?: number | null;
  availableInGrid?: boolean | null;
}

export interface AttributeValueCreateInput {
  name: string;
}

export interface AttributeValueInput {
  id?: string | null;
  values: (string | null)[];
}

export interface AuthorizationKeyInput {
  key: string;
  password: string;
}

export interface AutobookingConfigUpdateInput {
  readyStatusMinutes?: number | null;
  collectedStatusMinutes?: number | null;
  anyStatusMinutes?: number | null;
  storeType: StoreTypeEnum | null;
  enabled: boolean | null;
}

export interface AutoBookingSetIsEnabledInput {
  storeTypes: StoreTypeEnum[];
  enabled: boolean;
}

export interface BannerAnnouncementLinkInput {
  brandId?: string | null;
  collectionId?: string | null;
  productId?: string | null;
  categoryId?: string | null;
  couponId?: string | null;
}

export interface BannerCreateInput {
  name: string;
  action?: any | null;
  startDate?: any | null;
  endDate?: any | null;
  status: SmopStatusEnum;
  mall?: string | null;
  descriptionJson?: any | null;
  sale?: string | null;
  voucher?: string | null;
  isSplashBanner?: boolean | null;
  imageUrl?: any | null;
  dynamicLinkId?: string | null;
  verticals?: (BannerVerticalEnum | null)[] | null;
  type: SmopBannerTypeEnum;
}

export interface BannerInput {
  search?: string | null;
  isSplashBanner?: boolean | null;
  status?: SmopStatusEnum | null;
  mall?: string | null;
  malls?: (string | null)[] | null;
  startDate?: DateTimeRangeInput | null;
  type?: SmopBannerTypeEnum | null;
  verticals?: (BannerVerticalEnum | null)[] | null;
}

export interface BannerMallsInput {
  malls?: (string | null)[] | null;
  isAppliedToAllMalls: boolean;
}

export interface BannerUpdateInput {
  name?: string | null;
  action?: any | null;
  startDate?: any | null;
  endDate?: any | null;
  status?: SmopStatusEnum | null;
  mall?: string | null;
  descriptionJson?: any | null;
  sale?: string | null;
  voucher?: string | null;
  isSplashBanner?: boolean | null;
  imageUrl?: any | null;
  dynamicLinkId?: string | null;
  verticals?: (BannerVerticalEnum | null)[] | null;
}

export interface CouponCollectionCreateInput {
  title: string;
  subtitle?: string | null;
  classification?: string | null;
  categories?: (string | null)[] | null;
  status?: string | null;
  writeup?: string | null;
  bannerImage?: any | null;
  startDate?: any | null;
  endDate?: any | null;
}

export interface BatchHistoryFilterInput {
  creditDate?: DateRangeInput | null;
  generatedAt: DateRangeInput;
  mallId?: (string | null)[] | null;
}

export interface BatchesFilterInput {
  mallId?: (string | null)[] | null;
  search?: string | null;
}

export interface Book2goInput {
  packageWeight: any | null;
  packageHeight: any | null;
  packageWidth: any | null;
  packageLength: any | null;
}

export interface BrandCreateInput {
  name: string;
  code?: string | null;
  vertical?: BrandVerticalEnum | null;
  tagsStr?: (string | null)[] | null;
  tags?: (string | null)[] | null;
  brands?: (string | null)[] | null;
  classification?: ClassificationTypeEnum | null;
  dynamicLink?: string | null;
  image?: any | null;
  imageAlt?: string | null;
  isSmacAffiliate?: boolean | null;
  legalName: string;
  accountManager?: string | null;
  address?: AddressInput | null;
  mobileNo?: string | null;
  vendorId?: string | null;
  storeType?: StoreTypeEnum | null;
  status?: SmopStatusEnum | null;
  tinNo: string;
  completeAddress?: string | null;
  signatoryName: string;
  signatoryEmail: string;
  signatoryDesignation?: string | null;
  signatoryMobileNo: string;
  bankName: string;
  bankAccountName: string;
  bankAccountNo: string;
  financeName: string;
  financeEmail: string;
  financeMobileNo: string;
  customerCode?: string | null;
  vendorCode?: string | null;
  isLargeTaxpayer?: boolean | null;
  isPayoutEligible?: boolean | null;
  isFeatured?: boolean | null;
  logo?: any | null;
  attachTo?: string | null;
  cluster?: string | null;
  shopifyApiKey?: string | null;
  shopifyApiSecret?: string | null;
  shopifyApiShop?: string | null;
  brandGroup?: string | null;
  groupCode?: string | null;
  swornDeclarationsFlag?: boolean | null;
}

export interface BrandDetailsFilterInput {
  brandStatus?: (string | null)[] | null;
  search?: string | null;
  vertical?: (string | null)[] | null;
}

export interface BrandGroupCreateInput {
  name: string;
  code: string;
  vertical: BrandVerticalEnum;
  tagsStr?: (string | null)[] | null;
  tags?: (string | null)[] | null;
  brands?: (string | null)[] | null;
  classification?: ClassificationTypeEnum | null;
  dynamicLink?: string | null;
  image?: any | null;
  imageAlt?: string | null;
  isSmacAffiliate?: boolean | null;
}

export interface BrandGroupInput {
  id?: (string | null)[] | null;
  search?: string | null;
  searchInTags?: string | null;
  status?: string | null;
  vertical?: BrandVerticalEnum | null;
  classification?: ClassificationTypeEnum | null;
  isSmacAffiliate?: boolean | null;
  malls?: (string | null)[] | null;
  mallDistance?: (MallDistanceInput | null)[] | null;
}

export interface BrandGroupSortingInput {
  direction: OrderDirection;
  field: BrandGroupSortField;
}

export interface BrandGroupUpdateInput {
  name?: string | null;
  code?: string | null;
  vertical?: BrandVerticalEnum | null;
  tagsStr?: (string | null)[] | null;
  tags?: (string | null)[] | null;
  brands?: (string | null)[] | null;
  classification?: ClassificationTypeEnum | null;
  dynamicLink?: string | null;
  image?: any | null;
  imageAlt?: string | null;
  isSmacAffiliate?: boolean | null;
}

export interface BrandInput {
  search?: string | null;
  mall?: string | null;
  storeType?: StoreTypeEnum | null;
  accountManager?: string | null;
  malls?: (string | null)[] | null;
  createdAt?: DateTimeRangeInput | null;
  id?: (string | null)[] | null;
  mallDistance?: (MallDistanceInput | null)[] | null;
  isSmacAffiliate?: boolean | null;
}

export interface BrandUpdateInput {
  name?: string | null;
  legalName?: string | null;
  code?: string | null;
  accountManager?: string | null;
  address?: AddressInput | null;
  mobileNo?: string | null;
  vendorId?: string | null;
  storeType?: StoreTypeEnum | null;
  status?: SmopStatusEnum | null;
  tinNo?: string | null;
  completeAddress?: string | null;
  signatoryName?: string | null;
  signatoryEmail?: string | null;
  signatoryDesignation?: string | null;
  signatoryMobileNo?: string | null;
  bankName?: string | null;
  bankAccountName?: string | null;
  bankAccountNo?: string | null;
  financeName?: string | null;
  financeEmail?: string | null;
  financeMobileNo?: string | null;
  customerCode?: string | null;
  vendorCode?: string | null;
  isLargeTaxpayer?: boolean | null;
  isPayoutEligible?: boolean | null;
  isFeatured?: boolean | null;
  logo?: any | null;
  attachTo?: string | null;
  vertical?: BrandVerticalEnum | null;
  cluster?: string | null;
  shopifyApiKey?: string | null;
  shopifyApiSecret?: string | null;
  shopifyApiShop?: string | null;
  brandGroup?: string | null;
  swornDeclarationsFlag?: boolean | null;
}

export interface CategoryFilterInput {
  search?: string | null;
  storeType?: StoreTypeEnum | null;
  isFeatured?: boolean | null;
  ids?: (string | null)[] | null;
  smMarketsIds?: (number | null)[] | null;
  isMappedToSmMarket?: boolean | null;
  secondLevelWithSaleOnMall?: string | null;
  productIds?: (string | null)[] | null;
}

export interface CategoryInput {
  description?: string | null;
  descriptionJson?: any | null;
  name?: string | null;
  slug?: string | null;
  seo?: SeoInput | null;
  backgroundImage?: any | null;
  backgroundImageAlt?: string | null;
  storeType?: StoreTypeEnum | null;
  smMarketsId?: number | null;
  color?: string | null;
  iconImage?: any | null;
  iconImageAlt?: string | null;
  isFeatured?: boolean | null;
}

export interface CategorySortingInput {
  direction: OrderDirection;
  field: CategorySortField;
}

export interface ClusterCreateInput {
  name: string;
  productType: string;
  lowerPrepTimeDays: number;
  lowerPrepTimeHours: number;
  lowerPrepTimeMins: number;
  upperPrepTimeDays: number;
  upperPrepTimeHours: number;
  upperPrepTimeMins: number;
}

export interface ClusterInput {
  id?: (string | null)[] | null;
  search?: string | null;
}

export interface CollectionCreateInput {
  isPublished?: boolean | null;
  name?: string | null;
  slug?: string | null;
  description?: string | null;
  descriptionJson?: any | null;
  backgroundImage?: any | null;
  backgroundImageAlt?: string | null;
  seo?: SeoInput | null;
  publicationDate?: any | null;
  brand?: string | null;
  isPromo?: boolean | null;
  isFeatured?: boolean | null;
  isFeaturedOnSmFulfilledPage?: boolean | null;
  featuredIn?: PageTypeEnum[] | null;
  color?: string | null;
  iconImage?: any | null;
  iconImageAlt?: string | null;
  thumbnailLinkImage?: any | null;
  thumbnailLinkImageAlt?: string | null;
  products?: (string | null)[] | null;
}

export interface CollectionFilterInput {
  published?: CollectionPublished | null;
  search?: string | null;
  verticals?: (StoreTypeEnum | null)[] | null;
  ids?: (string | null)[] | null;
  featuredOnly?: boolean | null;
  smFulfilledFeaturedOnly?: boolean | null;
  isPromo?: boolean | null;
  isFromShopify?: boolean | null;
  isShopifyDefault?: boolean | null;
  brand?: string | null;
  featuredIn?: (PageTypeEnum | null)[] | null;
}

export interface CollectionInput {
  isPublished?: boolean | null;
  name?: string | null;
  slug?: string | null;
  description?: string | null;
  descriptionJson?: any | null;
  backgroundImage?: any | null;
  backgroundImageAlt?: string | null;
  seo?: SeoInput | null;
  publicationDate?: any | null;
  brand?: string | null;
  isPromo?: boolean | null;
  isFeatured?: boolean | null;
  isFeaturedOnSmFulfilledPage?: boolean | null;
  featuredIn?: PageTypeEnum[] | null;
  color?: string | null;
  iconImage?: any | null;
  iconImageAlt?: string | null;
  thumbnailLinkImage?: any | null;
  thumbnailLinkImageAlt?: string | null;
}

export interface CollectionSortingInput {
  direction: OrderDirection;
  field: CollectionSortField;
}

export interface ConfigurationItemInput {
  name: string;
  value?: string | null;
}

export interface ContactUsEmailInput {
  fullName: string;
  company: string;
  mallBranch: string;
  contactNumber: string;
  emailAddress: string;
  concern: string;
  message: string;
  fileUpload?: any | null;
}

export interface CouponCollectionFilterInput {
  search?: string | null;
  ids?: (string | null)[] | null;
  dealType?: (CouponDealTypeEnum | null)[] | null;
  categories?: (CouponCategoryEnum | null)[] | null;
  status?: (CouponStatusEnum | null)[] | null;
  featureIndex?: IntRangeInput | null;
  createdAt?: DateTimeRangeInput | null;
  updatedAt?: DateTimeRangeInput | null;
  startDate?: DateTimeRangeInput | null;
  endDate?: DateTimeRangeInput | null;
  mallCodes?: (string | null)[] | null;
  mallIds?: (string | null)[] | null;
}

export interface CouponCollectionSortingInput {
  direction: OrderDirection;
  behavior?: OrderBehavior | null;
  field: CouponCollectionSortField;
}

export interface CouponCollectionUpdateInput {
  title?: string | null;
  subtitle?: string | null;
  classification?: string | null;
  categories?: (string | null)[] | null;
  status?: string | null;
  writeup?: string | null;
  bannerImage?: any | null;
  startDate?: any | null;
  endDate?: any | null;
}

export interface CouponCreateInput {
  name: string;
  isNationwide?: boolean | null;
  category?: CouponCategoryEnum | null;
  hasMalls?: boolean | null;
  eventLocation?: string | null;
  eventStartDate?: any | null;
  eventEndDate?: any | null;
  collection?: string | null;
  malls?: (string | null)[] | null;
  code: string;
  isDuplicate: boolean;
  isFeatured: boolean;
  isHidden: boolean;
  quantity: number;
  assignee?: CouponAssigneeEnum | null;
  dealType: CouponDealTypeEnum;
  redeemType: CouponRedeemTypeEnum;
  usageLimit: number;
  usageTimerHour?: number | null;
  usageTimerMinute?: number | null;
  usageTimerSecond?: number | null;
  isUsageTimerApplied: boolean;
  userType: CouponUserTypeEnum;
  mainPromoTitle: string;
  mainPromoDescription: string;
  mechanics: string;
  accessPageSubtitle: string;
  accessPageTagline: string;
  accessPageDescription: string;
  promoImage: any;
  promoImageAlt?: string | null;
  accessImage: any;
  accessImageAlt?: string | null;
  discountValue: any;
  startDate: any;
  endDate: any;
  redeemStartDate: any;
  redeemEndDate: any;
  occurence: CouponOccurenceEnum;
  occurenceExclude: (CouponOccurenceExcludeEnum | null)[];
  redemptionFrequency: CouponOccurenceEnum;
  redemptionExclude: (CouponOccurenceExcludeEnum | null)[];
}

export interface CouponFilterInput {
  search?: string | null;
  quantity?: IntRangeInput | null;
  searchName?: string | null;
  status?: (CouponStatusEnum | null)[] | null;
  assignee?: (CouponAssigneeEnum | null)[] | null;
  category?: (CouponCategoryEnum | null)[] | null;
  dealType?: (CouponDealTypeEnum | null)[] | null;
  redeemType?: (CouponRedeemTypeEnum | null)[] | null;
  usageLimit?: IntRangeInput | null;
  userType?: (CouponUserTypeEnum | null)[] | null;
  discountValue?: PriceRangeInput | null;
  occurence?: (CouponOccurenceEnum | null)[] | null;
  occurenceExclude?: (CouponOccurenceExcludeEnum | null)[] | null;
  redemptionFrequency?: (CouponOccurenceEnum | null)[] | null;
  redemptionExclude?: (CouponOccurenceExcludeEnum | null)[] | null;
  startDate?: DateTimeRangeInput | null;
  endDate?: DateTimeRangeInput | null;
  redeemStartDate?: DateTimeRangeInput | null;
  redeemEndDate?: DateTimeRangeInput | null;
  exactStartEndDate?: any | null;
  isAppliedToAllMalls?: boolean | null;
  eventStartDate?: DateTimeRangeInput | null;
  eventEndDate?: DateTimeRangeInput | null;
  isFeatured?: boolean | null;
  isHidden?: boolean | null;
  isClaimable?: boolean | null;
  isRedeemable?: boolean | null;
  isNationwide?: boolean | null;
  hasMalls?: boolean | null;
  redemptionClaimedAt?: DateTimeRangeInput | null;
  redemptionRedeemedAt?: DateTimeRangeInput | null;
  redemptionSearch?: string | null;
  redemptionStatus?: (CouponRedemptionStatusEnum | null)[] | null;
  userHasRedemption?: boolean | null;
  malls?: (string | null)[] | null;
  participatingMalls?: (string | null)[] | null;
}

export interface CouponManualReorderInput {
  insertAfter?: string | null;
  insertBefore?: string | null;
  coupons: (string | null)[];
}

export interface CouponPresetReorderInput {
  couponId: string;
  reorderPreset: CouponReorderActionEnum;
}

export interface CouponRedemptionFilterInput {
  status?: (CouponRedemptionStatusEnum | null)[] | null;
  search?: string | null;
  claimedAt?: DateTimeRangeInput | null;
  redeemedAt?: DateTimeRangeInput | null;
  date?: DateTimeRangeInput | null;
  coupon?: string | null;
  user?: string | null;
  notifStatus?: (CouponNotificationStatusEnum | null)[] | null;
}

export interface CouponRedemptionSortingInput {
  direction: OrderDirection;
  behavior?: OrderBehavior | null;
  field: CouponRedemptionSortField;
}

export interface CouponSortingInput {
  direction: OrderDirection;
  behavior?: OrderBehavior | null;
  malls?: (string | null)[] | null;
  field: CouponSortField;
}

export interface CouponUpdateInput {
  name: string;
  isNationwide?: boolean | null;
  category?: CouponCategoryEnum | null;
  hasMalls?: boolean | null;
  eventLocation?: string | null;
  eventStartDate?: any | null;
  eventEndDate?: any | null;
  collection?: string | null;
  malls?: (string | null)[] | null;
  code: string;
  isFeatured: boolean;
  isHidden: boolean;
  isDuplicate: boolean;
  quantity: number;
  assignee?: CouponAssigneeEnum | null;
  dealType: CouponDealTypeEnum;
  redeemType: CouponRedeemTypeEnum;
  usageLimit: number;
  usageTimerHour?: number | null;
  usageTimerMinute?: number | null;
  usageTimerSecond?: number | null;
  isUsageTimerApplied: boolean;
  userType: CouponUserTypeEnum;
  mainPromoTitle: string;
  mainPromoDescription: string;
  mechanics: string;
  accessPageSubtitle: string;
  accessPageTagline: string;
  accessPageDescription: string;
  promoImage?: any | null;
  promoImageAlt?: string | null;
  accessImage?: any | null;
  accessImageAlt?: string | null;
  discountValue: any;
  startDate: any;
  endDate: any;
  redeemStartDate: any;
  redeemEndDate: any;
  occurence: CouponOccurenceEnum;
  occurenceExclude: (CouponOccurenceExcludeEnum | null)[];
  redemptionFrequency: CouponOccurenceEnum;
  redemptionExclude: (CouponOccurenceExcludeEnum | null)[];
}

export interface CustomerActivityFilterInput {
  lastLogin?: DateRangeInput | null;
  lastOrderDate?: DateRangeInput | null;
  search?: string | null;
}

export interface CustomerFilterInput {
  dateJoined?: DateRangeInput | null;
  moneySpent?: PriceRangeInput | null;
  numberOfOrders?: IntRangeInput | null;
  placedOrders?: DateRangeInput | null;
  search?: string | null;
  status?: LockStatus | null;
  smac?: string | null;
  newCustomerStatus?: (CustomerStatus | null)[] | null;
}

export interface CustomerInfoFilterInput {
  dateJoined: DateRangeInput;
  search?: string | null;
}

export interface CustomerInput {
  defaultBillingAddress?: AddressInput | null;
  defaultShippingAddress?: AddressInput | null;
  firstName?: string | null;
  lastName?: string | null;
  email?: string | null;
  isActive?: boolean | null;
  note?: string | null;
  accessGroup?: string | null;
  gender?: Gender | null;
  dateOfBirth?: any | null;
  osUsed?: string | null;
  lastOnlineDate?: any | null;
  status?: LockStatus | null;
  firebaseRegistrationId?: string | null;
  lastOrderDate?: any | null;
  lastOrderStatus?: OrderStatusFilter | null;
  newCustomerStatus?: CustomerStatus | null;
  riskCustomer?: boolean | null;
  distanceFromMall?: any | null;
  customerSegment?: CustomerSegment | null;
}

export interface DataAnalyticsDetailsFilterInput {
  analyticOrderDate: DateRangeInput;
  mallId?: (string | null)[] | null;
  vertical?: (string | null)[] | null;
}

export interface DataAnalyticsFilterInput {
  completedAt?: DateRangeInput | null;
  orderDate?: DateRangeInput | null;
}

export interface DateCoverageInput {
  from?: any | null;
  to?: any | null;
}

export interface DateRangeInput {
  gte?: any | null;
  lte?: any | null;
}

export interface DateTimeRangeInput {
  gte?: any | null;
  lte?: any | null;
}

export interface DraftCouponCreateInput {
  name: string;
  isNationwide?: boolean | null;
  hasMalls?: boolean | null;
  eventLocation?: string | null;
  eventStartDate?: any | null;
  eventEndDate?: any | null;
  malls?: (string | null)[] | null;
  code?: string | null;
  isFeatured?: boolean | null;
  isHidden?: boolean | null;
  isDuplicate?: boolean | null;
  quantity?: number | null;
  dealType?: CouponDealTypeEnum | null;
  category?: CouponCategoryEnum | null;
  redeemType?: CouponRedeemTypeEnum | null;
  usageLimit?: number | null;
  usageTimerHour?: number | null;
  usageTimerMinute?: number | null;
  usageTimerSecond?: number | null;
  isUsageTimerApplied?: boolean | null;
  userType?: CouponUserTypeEnum | null;
  assignee?: CouponAssigneeEnum | null;
  mainPromoTitle?: string | null;
  mainPromoDescription?: string | null;
  mechanics?: string | null;
  accessPageSubtitle?: string | null;
  accessPageTagline?: string | null;
  accessPageDescription?: string | null;
  promoImage?: any | null;
  promoImageAlt?: string | null;
  accessImage?: any | null;
  accessImageAlt?: string | null;
  discountValue?: any | null;
  startDate?: any | null;
  endDate?: any | null;
  redeemStartDate?: any | null;
  redeemEndDate?: any | null;
  occurence?: CouponOccurenceEnum | null;
  occurenceExclude?: (CouponOccurenceExcludeEnum | null)[] | null;
  redemptionFrequency?: CouponOccurenceEnum | null;
  redemptionExclude?: (CouponOccurenceExcludeEnum | null)[] | null;
}

export interface DraftCouponCreateInput {
  name: string;
  isNationwide?: boolean | null;
  category?: CouponCategoryEnum | null;
  hasMalls?: boolean | null;
  eventLocation?: string | null;
  eventStartDate?: any | null;
  eventEndDate?: any | null;
  collection?: string | null;
  malls?: (string | null)[] | null;
  code?: string | null;
  isFeatured?: boolean | null;
  isHidden?: boolean | null;
  isDuplicate?: boolean | null;
  quantity?: number | null;
  dealType?: CouponDealTypeEnum | null;
  redeemType?: CouponRedeemTypeEnum | null;
  usageLimit?: number | null;
  usageTimerHour?: number | null;
  usageTimerMinute?: number | null;
  usageTimerSecond?: number | null;
  userType?: CouponUserTypeEnum | null;
  assignee?: CouponAssigneeEnum | null;
  mainPromoTitle?: string | null;
  mainPromoDescription?: string | null;
  mechanics?: string | null;
  accessPageSubtitle?: string | null;
  accessPageTagline?: string | null;
  accessPageDescription?: string | null;
  promoImage?: any | null;
  promoImageAlt?: string | null;
  accessImage?: any | null;
  accessImageAlt?: string | null;
  discountValue?: any | null;
  startDate?: any | null;
  endDate?: any | null;
  redeemStartDate?: any | null;
  redeemEndDate?: any | null;
  occurence?: CouponOccurenceEnum | null;
  occurenceExclude?: (CouponOccurenceExcludeEnum | null)[] | null;
  redemptionFrequency?: CouponOccurenceEnum | null;
  redemptionExclude?: (CouponOccurenceExcludeEnum | null)[] | null;
}

export interface DraftCouponUpdateInput {
  name?: string | null;
  isNationwide?: boolean | null;
  category?: CouponCategoryEnum | null;
  hasMalls?: boolean | null;
  eventLocation?: string | null;
  eventStartDate?: any | null;
  eventEndDate?: any | null;
  collection?: string | null;
  malls?: (string | null)[] | null;
  code?: string | null;
  isFeatured?: boolean | null;
  isHidden?: boolean | null;
  quantity?: number | null;
  dealType?: CouponDealTypeEnum | null;
  redeemType?: CouponRedeemTypeEnum | null;
  usageLimit?: number | null;
  usageTimerHour?: number | null;
  usageTimerMinute?: number | null;
  usageTimerSecond?: number | null;
  isUsageTimerApplied: boolean;
  userType?: CouponUserTypeEnum | null;
  assignee?: CouponAssigneeEnum | null;
  mainPromoTitle?: string | null;
  mainPromoDescription?: string | null;
  mechanics?: string | null;
  accessPageSubtitle?: string | null;
  accessPageTagline?: string | null;
  accessPageDescription?: string | null;
  promoImage?: any | null;
  promoImageAlt?: string | null;
  accessImage?: any | null;
  accessImageAlt?: string | null;
  discountValue?: any | null;
  startDate?: any | null;
  endDate?: any | null;
  redeemStartDate?: any | null;
  redeemEndDate?: any | null;
  occurence?: CouponOccurenceEnum | null;
  occurenceExclude?: (CouponOccurenceExcludeEnum | null)[] | null;
  redemptionFrequency?: CouponOccurenceEnum | null;
  redemptionExclude?: (CouponOccurenceExcludeEnum | null)[] | null;
}

export interface DraftOrderInput {
  billingAddress?: AddressInput | null;
  user?: string | null;
  userEmail?: string | null;
  discount?: any | null;
  shippingAddress?: AddressInput | null;
  shippingMethod?: string | null;
  voucher?: string | null;
  customerNote?: string | null;
  mall?: string | null;
}

export interface DropOffLocationCreateInput {
  firstName?: string | null;
  lastName?: string | null;
  contactNo?: string | null;
  longitude?: any | null;
  latitude?: any | null;
  dropOffAddress?: string | null;
  remarks?: string | null;
  defaultDropOffLocation?: boolean | null;
  description?: string | null;
  name: string;
  code?: string | null;
  mall: string;
  status?: LogisticsStatusEnum;
  templateId?: string | null;
}

export interface DropOffLocationInput {
  search?: string | null;
  mall?: string | null;
  ids?: (string | null)[] | null;
  status?: LogisticsStatusEnum | null;
  templateStatus?: TemplateStatusEnum | null;
}

export interface DropOffLocationUpdateInput {
  firstName?: string | null;
  lastName?: string | null;
  contactNo?: string | null;
  longitude?: any | null;
  latitude?: any | null;
  dropOffAddress?: string | null;
  remarks?: string | null;
  defaultDropOffLocation?: boolean | null;
  description?: string | null;
  name: string;
  code?: string | null;
  mall: string;
  status?: LogisticsStatusEnum;
}

export interface DropOffLocationSortingInput {
  direction: OrderDirection;
  behavior?: OrderBehavior | null;
  field: DropOffLocationSortField;
}

export interface ExportInfoInput {
  attributes?: string[] | null;
  warehouses?: string[] | null;
  fields?: ProductFieldEnum[] | null;
  template?: ProductTemplateEnum | null;
}

export interface ExportOrdersInput {
  scope: ExportScope;
  filter?: OrderFilterInput | null;
  ids?: string[] | null;
  fileName: string;
  fileType: FileTypesEnum;
}

export interface ExportProductsInput {
  scope: ExportScope;
  filter?: ProductFilterInput | null;
  ids?: string[] | null;
  exportInfo?: ExportInfoInput | null;
  fileType: FileTypesEnum;
  viewAs?: ProductUserViewEnum | null;
}

export interface ExportSaleErrorVariantsInput {
  saleId: string;
  fileName: string;
  fileNameTimestamp?: string | null;
  fileType: FileTypesEnum;
}

export interface ExportStoreOrdersInput {
  scope: ExportScope;
  filter?: StoreOrderFilterInput | null;
  ids?: string[] | null;
  fileName: string;
  fileType: FileTypesEnum;
}
export interface ExportRemittanceOrdersInput {
  scope: ExportScope;
  filter?: RemittanceOrderFilterInput | null;
  ids?: string[] | null;
  fileName: string;
  fileType: FileTypesEnum;
}

export interface FulfillmentCancelInput {
  warehouseId: string;
}

export interface FulfillmentUpdateTrackingInput {
  trackingNumber?: string | null;
  notifyCustomer?: boolean | null;
}

export interface GrabExpressFilterInput {
  completedAt?: DateRangeInput | null;
  mallId?: (string | null)[] | null;
  orderDate?: DateRangeInput | null;
  orderStatus?: (string | null)[] | null;
  search?: string | null;
  shippingMethodName?: (string | null)[] | null;
}

export interface IntRangeInput {
  gte?: number | null;
  lte?: number | null;
}

export interface MallActivityLogInput {
  search?: string | null;
  id?: (string | null)[] | null;
  updatedBy?: (string | null)[] | null;
  action?: ActivityLogActionsEnum | null;
  subject?: string | null;
  created?: DateRangeInput | null;
}

export interface MallCreateInput {
  name: string;
  code: string;
  description?: string | null;
  longitude: any;
  latitude: any;
  status?: SmopStatusEnum | null;
  contactPerson: string;
  mobileNo: string;
  telephoneNo: string;
  email: string;
  address?: string | null;
  mallAdmin?: string | null;
  totalLandArea?: any | null;
  mallOpening?: any | null;
  mallClosing?: any | null;
  serviceArea?: any | null;
  isServiceable?: boolean | null;
  expressDeliveryAvailable?: boolean | null;
  expressLongDistanceAvailable?: boolean | null;
  isInMallPickup?: boolean | null;
  nextDayAvailable?: boolean | null;
  sameDayAvailable?: boolean | null;
  isNationwideDelivery?: boolean | null;
  genMerchCutoffTime?: any | null;
  groceryCutoffTime?: any | null;
  foodAndBevCutoffTime?: any | null;
  sameDayGmCutoffTime?: any | null;
  smMarketExternalId?: number | null;
  smMarketExternalName?: string | null;
  smMarketExternalCode?: string | null;
  city: string;
  provinceCode: string;
  provinceName: string;
}

export interface MallDistanceInput {
  mallId?: string | null;
  distance?: any | null;
}

export interface MallInput {
  search?: string | null;
  brand?: string | null;
  isSystemMaintained?: boolean | null;
  id?: (string | null)[] | null;
  isServiceable?: boolean | null;
  status?: string | null;
  statuses?: (SmopStatusEnum | null)[] | null;
}

export interface MallOrderCountFilterInput {
  orderDate?: DateRangeInput | null;
  search?: string | null;
}

export interface MallSortingInput {
  direction: OrderDirection;
  behavior?: OrderBehavior | null;
  field: MallSortField;
}

export interface MallUpdateInput {
  name?: string | null;
  code?: string | null;
  description?: string | null;
  longitude?: any | null;
  latitude?: any | null;
  status?: SmopStatusEnum | null;
  contactPerson?: string | null;
  mobileNo?: string | null;
  telephoneNo?: string | null;
  email?: string | null;
  address?: string | null;
  mallAdmin?: string | null;
  totalLandArea?: any | null;
  mallOpening?: any | null;
  mallClosing?: any | null;
  serviceArea?: any | null;
  isServiceable?: boolean | null;
  expressDeliveryAvailable?: boolean | null;
  expressLongDistanceAvailable?: boolean | null;
  isInMallPickup?: boolean | null;
  nextDayAvailable?: boolean | null;
  sameDayAvailable?: boolean | null;
  isNationwideDelivery?: boolean | null;
  genMerchCutoffTime?: any | null;
  groceryCutoffTime?: any | null;
  foodAndBevCutoffTime?: any | null;
  sameDayGmCutoffTime?: any | null;
  smMarketExternalId?: number | null;
  smMarketExternalName?: string | null;
  smMarketExternalCode?: string | null;
  city?: string | null;
  provinceCode?: string | null;
  provinceName?: string | null;
}

export interface MenuCreateInput {
  name: string;
  slug?: string | null;
  items?: (MenuItemInput | null)[] | null;
}

export interface MenuItemCreateInput {
  name: string;
  url?: string | null;
  category?: string | null;
  collection?: string | null;
  page?: string | null;
  menu: string;
  parent?: string | null;
}

export interface MenuItemInput {
  name?: string | null;
  url?: string | null;
  category?: string | null;
  collection?: string | null;
  page?: string | null;
}

export interface MenuItemMoveInput {
  itemId: string;
  parentId?: string | null;
  sortOrder?: number | null;
}

export interface MenuSortingInput {
  direction: OrderDirection;
  field: MenuSortField;
}

export interface MerchantSettlementFilterInput {
  brandId?: (string | null)[] | null;
  mallId?: (string | null)[] | null;
  payoutId?: string | null;
  settlementDate?: DateRangeInput | null;
}

export interface MetadataInput {
  key: string;
  value: string;
}

export interface NameTranslationInput {
  name?: string | null;
}

export interface OTPGenerateInput {
  user: string;
}

export interface OTPVerifyInput {
  user: string;
  pin: string;
}

export interface OrderAddNoteInput {
  message: string;
}

export interface OrderDraftFilterInput {
  customer?: string | null;
  created?: DateRangeInput | null;
  search?: string | null;
}

export interface OrderFilterInput {
  orderCode?: string | null;
  parcelNo?: string | null;
  paymentStatus?: (PaymentChargeStatusEnum | null)[] | null;
  smopStatus?: (SmopOrderStatusEnum | null)[] | null;
  verticalType?: (StoreTypeEnum | null)[] | null;
  customer?: string | null;
  created?: DateRangeInput | null;
  search?: string | null;
  malls?: (string | null)[] | null;
  courierTypes?: (CourierFilter | null)[] | null;
  deliveryTypes?: (DeliveryTypeEnum | null)[] | null;
  deliverySchedules?: DateRangeInput | null;
  brandName?: string | null;
  paymentMethod?: string | null;
  riderName?: StaffNameInput | null;
  runnerName?: StaffNameInput | null;
  paymentChannelCode?: (PaymentChannelCodeEnum | null)[] | null;
  isFromShopify?: boolean | null;
  isShopifyOrderCreated?: boolean | null;
}

export interface OrderFulfillInput {
  lines: OrderFulfillLineInput[];
  notifyCustomer?: boolean | null;
}

export interface OrderFulfillLineInput {
  orderLineId?: string | null;
  stocks: OrderFulfillStockInput[];
}

export interface OrderFulfillStockInput {
  quantity: number;
  warehouse: string;
}

export interface OrderLineCreateInput {
  quantity: number;
  status?: OrderLineStatusEnum | null;
  tenant?: string | null;
  variantId: string;
}

export interface OrderLineInput {
  quantity: number;
  status?: OrderLineStatusEnum | null;
  tenant?: string | null;
}

export interface OrderLinesFilterInput {
  brandId?: (string | null)[] | null;
  canceledAt?: DateRangeInput | null;
  channelCode?: PaymentChannelCodeEnum | null;
  completedAt?: DateRangeInput | null;
  mallId?: (string | null)[] | null;
  orderDate?: DateRangeInput | null;
  orderStatus?: (string | null)[] | null;
  paymentMethodType?: string | null;
  search?: string | null;
  shippingMethodName?: (string | null)[] | null;
}

export interface OrderSortingInput {
  direction: OrderDirection;
  field: OrderSortField;
}

export interface OrderUpdateInput {
  billingAddress?: AddressInput | null;
  userEmail?: string | null;
  shippingAddress?: AddressInput | null;
}

export interface OrderUpdateShippingInput {
  shippingMethod?: string | null;
}

export interface PageFilterInput {
  search?: string | null;
}

export interface PageInput {
  slug?: string | null;
  title?: string | null;
  content?: string | null;
  contentJson?: any | null;
  isPublished?: boolean | null;
  publicationDate?: string | null;
  seo?: SeoInput | null;
}

export interface PageSortingInput {
  direction: OrderDirection;
  field: PageSortField;
}

export interface PageTranslationInput {
  seoTitle?: string | null;
  seoDescription?: string | null;
  title?: string | null;
  content?: string | null;
  contentJson?: any | null;
}

export interface PaymentEventsFilterInput {
  channelCode?: PaymentChannelCodeEnum | null;
  order_code?: string | null;
  paymentMethodType?: PaymentGatewayEnum | null;
  search?: string | null;
  transaction_id?: string | null;
}

export interface PayoutMallFilterInput {
  mallId?: (string | null)[] | null;
  search?: string | null;
  settlementStatus?: SettlementStatusEnum | null;
}

export interface PayoutScheduleInput {
  coverageDate: DateCoverageInput;
  schedule: any;
}

export interface PayoutStoreOrdersFilterInput {
  completedAt?: DateRangeInput | null;
  orderDate?: DateRangeInput | null;
  paymentMethodType?: string | null;
  payoutId: string;
  search?: string | null;
  settlementDate?: DateRangeInput | null;
}

export interface PayoutStoreOrdersInput {
  deliveryFeeAdjustment?: number | null;
  otherAdjustment?: number | null;
  otherAdjustmentRemarks?: string | null;
  paymentFeeAdjustment?: number | null;
  penalties?: number | null;
  settlementStatus: SettlementStatusEnum;
}

export interface PayoutStoreOrdersUpdateInput {
  other_adjustment?: number | null;
  payment_fee_adjustment?: number | null;
  payment_fee_adjustment_vat?: number | null;
  settlement_date?: any | null;
  settlement_status: SettlementStatusEnum;
}

export interface PayoutsFilterInput {
  brandId?: (string | null)[] | null;
  coverageDate?: DateRangeInput | null;
  generatedAt: DateRangeInput;
  mallId?: (string | null)[] | null;
  payoutStatus?: (PayoutStatusEnum | null)[] | null;
  search?: string | null;
}

export interface PermissionGroupCreateInput {
  addPermissions?: PermissionEnum[] | null;
  addUsers?: string[] | null;
  name: string;
}

export interface PermissionGroupFilterInput {
  search?: string | null;
  ids?: (string | null)[] | null;
}

export interface PermissionGroupSortingInput {
  direction: OrderDirection;
  field: PermissionGroupSortField;
}

export interface PermissionGroupUpdateInput {
  addPermissions?: PermissionEnum[] | null;
  addUsers?: string[] | null;
  name?: string | null;
  removePermissions?: PermissionEnum[] | null;
  removeUsers?: string[] | null;
  mfaEnabledDate?: any | null;
}

export interface PluginFilterInput {
  active?: boolean | null;
  search?: string | null;
}

export interface PluginSortingInput {
  direction: OrderDirection;
  field: PluginSortField;
}

export interface PluginUpdateInput {
  active?: boolean | null;
  configuration?: (ConfigurationItemInput | null)[] | null;
}

export interface PriceRangeInput {
  gte?: number | null;
  lte?: number | null;
}

export interface ProductCategoriesFilterInput {
  level?: number | null;
  search?: string | null;
}

export interface ProductCreateInput {
  attributes?: (AttributeValueInput | null)[] | null;
  publicationDate?: any | null;
  category?: string | null;
  chargeTaxes?: boolean | null;
  collections?: (string | null)[] | null;
  description?: string | null;
  descriptionJson?: any | null;
  isPublished?: boolean | null;
  name: string;
  slug?: string | null;
  taxCode?: string | null;
  seo?: SeoInput | null;
  weight?: any | null;
  height?: any | null;
  width?: any | null;
  length?: any | null;
  sku?: string | null;
  images?: (ProductImageInput | null)[] | null;
  trackInventory?: boolean | null;
  basePrice?: any | null;
  visibleInListings?: boolean | null;
  brand?: string | null;
  brandLabel?: string | null;
  isAvailabilityTime?: boolean | null;
  availabilityTimeStart?: any | null;
  availabilityTimeEnd?: any | null;
  choices?: (string | null)[] | null;
  isInventorySettings?: boolean | null;
  productStatus?: ProductStatusEnum | null;
  isSimpleProduct?: boolean | null;
  tags?: (string | null)[] | null;
  nonCod?: boolean | null;
  productType: string;
  stocks?: StockInput[] | null;
}

export interface ProductDetailsFilterInput {
  productStatus?: (string | null)[] | null;
  productUpdatedDate: DateRangeInput;
  search?: string | null;
}

export interface ProductFilterInput {
  isPublished?: boolean | null;
  collections?: (string | null)[] | null;
  categories?: (string | null)[] | null;
  hasCategory?: boolean | null;
  attributes?: (AttributeInput | null)[] | null;
  stockAvailability?: StockAvailability | null;
  productType?: ProductTypeEnum | null;
  stocks?: ProductStockFilterInput | null;
  search?: string | null;
  isFromShopify?: boolean | null;
  isVisible?: ProductVisibilityFilterInput | null;
  saleOnMall?: string | null;
  price?: PriceRangeInput | null;
  minimalPrice?: PriceRangeInput | null;
  sellingPrice?: PriceRangeInput | null;
  productTypes?: (string | null)[] | null;
  searchByName?: string | null;
  searchBySku?: string | null;
  ids?: (string | null)[] | null;
  brands?: (string | null)[] | null;
  tenants?: (string | null)[] | null;
  malls?: (string | null)[] | null;
  productStatus?: ProductStatusEnum | null;
  productStatuses?: (ProductStatusEnum | null)[] | null;
  storeType?: StoreTypeEnum | null;
  mallDistance?: (MallDistanceInput | null)[] | null;
}

export interface ProductImageInput {
  alt?: string | null;
  image: any;
}

export interface ProductOrder {
  direction: OrderDirection;
  attributeId?: string | null;
  field?: ProductOrderField | null;
}

export interface ProductReportFilterInput {
  brandId?: (string | null)[] | null;
  mallId?: (string | null)[] | null;
  orderDate: DateRangeInput;
  search?: string | null;
  tenantType?: string | null;
}

export interface ProductStockFilterInput {
  warehouseIds?: string[] | null;
  quantity?: IntRangeInput | null;
}

export interface ProductStocksFilterInput {
  brandId?: (string | null)[] | null;
  mallId?: (string | null)[] | null;
  productStatus?: (string | null)[] | null;
  productUpdatedDate?: DateRangeInput | null;
  search?: string | null;
  stocksUpdatedDate?: DateRangeInput | null;
  trackInventory?: boolean | null;
  vertical?: (string | null)[] | null;
}

export interface ProductTypeFilterInput {
  search?: string | null;
  configurable?: ProductTypeConfigurable | null;
  productType?: ProductTypeEnum | null;
  storeType?: StoreTypeEnum | null;
  brand?: string | null;
  ids?: (string | null)[] | null;
}

export interface ProductTypeInput {
  name?: string | null;
  slug?: string | null;
  hasVariants?: boolean | null;
  productAttributes?: (string | null)[] | null;
  variantAttributes?: (string | null)[] | null;
  isShippingRequired?: boolean | null;
  isDigital?: boolean | null;
  weight?: any | null;
  taxCode?: string | null;
  storeType?: StoreTypeEnum | null;
}

export interface ProductTypeSortingInput {
  direction: OrderDirection;
  field: ProductTypeSortField;
}

export interface ProductUpdateInput {
  attributes?: (AttributeValueInput | null)[] | null;
  publicationDate?: any | null;
  category?: string | null;
  chargeTaxes?: boolean | null;
  collections?: (string | null)[] | null;
  description?: string | null;
  descriptionJson?: any | null;
  isPublished?: boolean | null;
  name: string;
  slug?: string | null;
  taxCode?: string | null;
  seo?: SeoInput | null;
  weight?: any | null;
  height?: any | null;
  width?: any | null;
  length?: any | null;
  sku?: string | null;
  images?: (ProductImageInput | null)[] | null;
  trackInventory?: boolean | null;
  basePrice?: any | null;
  visibleInListings?: boolean | null;
  brand?: string | null;
  brandLabel?: string | null;
  isAvailabilityTime?: boolean | null;
  availabilityTimeStart?: any | null;
  availabilityTimeEnd?: any | null;
  choices?: (string | null)[] | null;
  isInventorySettings?: boolean | null;
  productStatus?: ProductStatusEnum | null;
  isSimpleProduct?: boolean | null;
  tags?: (string | null)[] | null;
  nonCod?: boolean | null;
  stocks?: StockInput[] | null;
}

export interface ProductUserViewInfoInput {
  viewAs: ProductUserViewEnum;
  brandId?: string | null;
  tenantId?: string | null;
}

export interface ProductVariantBulkCreateInput {
  name?: string | null;
  costPrice?: any | null;
  price?: any | null;
  sku: string;
  trackInventory?: boolean | null;
  weight?: any | null;
  height?: any | null;
  width?: any | null;
  length?: any | null;
  brand?: string | null;
  barcode?: string | null;
  discountedPrice?: any | null;
  stocks?: StockInput[] | null;
}

export interface ProductVariantCreateInput {
  name?: string | null;
  costPrice?: any | null;
  price?: any | null;
  sku?: string | null;
  trackInventory?: boolean | null;
  weight?: any | null;
  height?: any | null;
  width?: any | null;
  length?: any | null;
  brand?: string | null;
  barcode?: string | null;
  discountedPrice?: any | null;
  product: string;
  stocks?: StockInput[] | null;
}

export interface ProductVisibilityFilterInput {
  tenant?: string | null;
  isVisible?: boolean | null;
}

export interface ProductVisibilityInput {
  isVisible: boolean;
  isAvailable: boolean;
  product: string;
  tenant: string;
}

export interface RackCreateInput {
  name: string | null;
  prefix: string | null;
  dropOffLocationId: string | null;
  templateId: string | null;
  totalBin: number | null;
}

export interface RemittanceTopSheetFilterInput {
  completedAt: DateRangeInput;
  orderDate?: DateRangeInput | null;
  search?: string | null;
}

export interface RemittanceTopSheetPendingFilterInput {
  orderDate: DateRangeInput;
}

export interface RemittanceTopSheetReportFilterInput {
  completedAt: DateRangeInput;
  orderDate?: DateRangeInput | null;
  search?: string | null;
}

export interface RemittanceConfigUpdateInput {
  activateReminder?: boolean | null;
  codLimit?: any | null;
  dailyRemittanceNotifTimes?: (RemittanceNotifTimeEnum | null)[] | null;
  minRemittanceLimit: any | null;
}

export interface RemittanceOrderFilterInput {
  orderCode?: string | null;
  search?: string | null;
  smopStatus?: (SmopOrderStatusEnum | null)[] | null;
  verticalType?: (StoreTypeEnum | null)[] | null;
  status?: (RemittanceStatusEnum | null)[] | null;
  createdAt?: DateRangeInput | null;
  remittedAt?: DateRangeInput | null;
  remitter?: RemitterNameInput | null;
  paymentType?: string | null;
  shippedAt?: DateRangeInput | null;
  completedAt?: DateRangeInput | null;
  rider?: StaffNameInput | null;
  motherOrder?: string | null;
  amount?: string | null;
  deliveryTypes?: (DeliveryTypeEnum | null)[] | null;
  hasRemittanceId?: boolean | null;
  remittanceId?: string | null;
  malls?: string | null;
  isPaymentCollected?: boolean | null;
}

export interface RemittanceOrderSortingInput {
  direction: OrderDirection;
  field: RemittanceOrderSortField;
}

export interface RemittanceSortingInput {
  direction: OrderDirection;
  field: RemittanceSortField;
}

export interface RemitterNameInput {
  firstName?: string | null;
  lastName?: string | null;
}

export interface ReorderInput {
  id: string;
  sortOrder?: number | null;
}

export interface RiderDispatchBatchFilterInput {
  batchCode?: string | null;
  rider?: string | null;
  createdBy?: string | null;
  created?: DateRangeInput | null;
  deliveryDate?: DateRangeInput | null;
  riderName?: StaffNameInput | null;
}

export interface RiderDispatchBatchSortingInput {
  direction: OrderDirection;
  field: RiderDispatchBatchSortField;
}

export interface SaleCatalogueInput {
  products?: (string | null)[] | null;
  productVariants?: (SaleProductVariantInput | null)[] | null;
  categories?: (string | null)[] | null;
  collections?: (string | null)[] | null;
}

export interface SaleFilterInput {
  status?: (DiscountStatusEnum | null)[] | null;
  saleType?: DiscountValueTypeEnum | null;
  started?: DateTimeRangeInput | null;
  search?: string | null;
  brand?: string | null;
}

export interface SaleInput {
  name?: string | null;
  type?: DiscountValueTypeEnum | null;
  value?: any | null;
  products?: (string | null)[] | null;
  categories?: (string | null)[] | null;
  collections?: (string | null)[] | null;
  startDate: any;
  endDate: any;
  isAppliedToAllMalls: boolean;
  malls?: (string | null)[] | null;
  isAppliedToAllStores: boolean;
  tenants?: (string | null)[] | null;
  description?: string | null;
  brand?: string | null;
}

export interface SaleProductVariantInput {
  product_variant: string;
  sellingPrice?: any | null;
  smoShare?: any | null;
  tenantShare?: any | null;
}

export interface SaleSortingInput {
  direction: OrderDirection;
  field: SaleSortField;
}

export interface SellerOrdersFilterInput {
  completedAt?: DateRangeInput | null;
  mallId?: (string | null)[] | null;
  orderDate?: DateRangeInput | null;
  orderStatus?: (string | null)[] | null;
  paymentMethodType?: string | null;
  search?: string | null;
  shippingMethodName?: (string | null)[] | null;
  storeOrderStatus?: (string | null)[] | null;
}

export interface SeoInput {
  title?: string | null;
  description?: string | null;
}

export interface SetCouponsToCollectionInput {
  assign?: (string | null)[] | null;
  remove?: (string | null)[] | null;
}

export interface ShippingPriceInput {
  name?: string | null;
  price?: any | null;
  minimumOrderPrice?: any | null;
  maximumOrderPrice?: any | null;
  minimumOrderWeight?: any | null;
  maximumOrderWeight?: any | null;
  type?: ShippingMethodTypeEnum | null;
  deliveryType: DeliveryTypeEnum;
  shippingZone?: string | null;
  isCashAllowed?: boolean | null;
  minimumRequiredVersion?: string | null;
}

export interface ShippingZoneCreateInput {
  name?: string | null;
  countries?: (string | null)[] | null;
  default?: boolean | null;
  addWarehouses?: (string | null)[] | null;
}

export interface ShippingZoneUpdateInput {
  name?: string | null;
  countries?: (string | null)[] | null;
  default?: boolean | null;
  addWarehouses?: (string | null)[] | null;
  removeWarehouses?: (string | null)[] | null;
}

export interface ShopSettingsInput {
  headerText?: string | null;
  description?: string | null;
  includeTaxesInPrices?: boolean | null;
  displayGrossPrices?: boolean | null;
  chargeTaxesOnShipping?: boolean | null;
  trackInventoryByDefault?: boolean | null;
  defaultWeightUnit?: WeightUnitsEnum | null;
  automaticFulfillmentDigitalProducts?: boolean | null;
  defaultDigitalMaxDownloads?: number | null;
  defaultDigitalUrlValidDays?: number | null;
  defaultMailSenderName?: string | null;
  defaultMailSenderAddress?: string | null;
  customerSetPasswordUrl?: string | null;
  isFreshdeskSupportEnabled?: boolean | null;
}

export interface ShopifyCredentialsCheckInput {
  brand?: string | null;
  shopifyApiSecret?: string | null;
  shopifyApiShop?: string | null;
}

export interface SiteDomainInput {
  domain?: string | null;
  name?: string | null;
}

export interface StaffCreateInput {
  firstName?: string | null;
  lastName?: string | null;
  email?: string | null;
  isActive?: boolean | null;
  note?: string | null;
  accessGroup?: string | null;
  gender?: Gender | null;
  dateOfBirth?: any | null;
  osUsed?: string | null;
  lastOnlineDate?: any | null;
  status?: LockStatus | null;
  firebaseRegistrationId?: string | null;
  addGroups?: string[] | null;
  contactNo?: string | null;
  smopUsertypeCode?: SmopUserTypeCode | null;
  objectId?: string | null;
  companyName?: string | null;
  malls?: (string | null)[] | null;
  promoCreator?: StaffPromoCreatorEnum | null;
  redirectUrl?: string | null;
  password?: string | null;
}

export interface StaffNameInput {
  firstName?: string | null;
  lastName?: string | null;
}

export interface StaffUpdateInput {
  firstName?: string | null;
  lastName?: string | null;
  email?: string | null;
  isActive?: boolean | null;
  note?: string | null;
  accessGroup?: string | null;
  gender?: Gender | null;
  dateOfBirth?: any | null;
  osUsed?: string | null;
  lastOnlineDate?: any | null;
  status?: LockStatus | null;
  firebaseRegistrationId?: string | null;
  addGroups?: string[] | null;
  contactNo?: string | null;
  smopUsertypeCode?: SmopUserTypeCode | null;
  objectId?: string | null;
  companyName?: string | null;
  malls?: (string | null)[] | null;
  promoCreator?: StaffPromoCreatorEnum | null;
  removeGroups?: string[] | null;
}

export interface StaffUserInput {
  status?: LockStatus | null;
  search?: string | null;
  groups?: (string | null)[] | null;
  smopUserType?: (SmopUserTypeCode | null)[] | null;
}

export interface StockInput {
  warehouse: string;
  quantity?: number | null;
}

export interface StoreDetailsFilterInput {
  brandId?: (string | null)[] | null;
  mallId?: (string | null)[] | null;
  search?: string | null;
  storeStatus?: (string | null)[] | null;
}

export interface StoreOrderFilterInput {
  orderCode?: string | null;
  parcelNo?: string | null;
  smopStatus?: (SmopOrderStatusEnum | null)[] | null;
  verticalType?: (StoreTypeEnum | null)[] | null;
  search?: string | null;
  tenant?: (string | null)[] | null;
  customer?: string | null;
  created?: DateRangeInput | null;
  runner?: string | null;
  runnerName?: StaffNameInput | null;
  shipping?: DateRangeInput | null;
  deliveryType?: (DeliveryTypeEnum | null)[] | null;
  paymentMethod?: string | null;
  brandName?: string | null;
  isUnassigned?: boolean | null;
  deliverySchedules?: DateRangeInput | null;
  riderName?: StaffNameInput | null;
  smac?: string | null;
  paymentChannelCode?: (PaymentChannelCodeEnum | null)[] | null;
  malls?: (string | null)[] | null;
}

export interface StoreOrderLineInput {
  quantity: number;
  variantId: string;
}

export interface StoreOrderLineUpdateQuantityInput {
  quantity: number;
  lineId: string;
}

export interface StoreOrderSortingInput {
  direction: OrderDirection;
  field: StoreOrderSortField;
}

export interface StoreOrdersBiFilterInput {
  brandId?: (string | null)[] | null;
  canceledAt?: DateRangeInput | null;
  channelCode?: PaymentChannelCodeEnum | null;
  completedAt?: DateRangeInput | null;
  isPayoutEligible?: boolean | null;
  mallId?: (string | null)[] | null;
  orderDate?: DateRangeInput | null;
  orderStatus?: (string | null)[] | null;
  paymentMethodType?: string | null;
  search?: string | null;
  settlementStatus?: (SettlementStatusEnum | null)[] | null;
  shippingMethodName?: (string | null)[] | null;
  storeOrderStatus?: (string | null)[] | null;
  vertical?: (string | null)[] | null;
}

export interface TaskAreaCreateInput {
  name: string;
  code?: string | null;
  description?: string | null;
  dropOffLocation: string;
  runners?: (string | null)[] | null;
  tenants?: (string | null)[] | null;
  status?: LogisticsStatusEnum | null;
  template?: string | null;
}

export interface TaskAreaUpdateInput {
  name?: string | null;
  code?: string | null;
  description?: string | null;
  dropOffLocation?: string | null;
  runners?: (string | null)[] | null;
  tenants?: (string | null)[] | null;
  status?: LogisticsStatusEnum | null;
  template?: string | null;
}

export interface TaskAreadAddRemoveStoresInput {
  id: string;
  tenants: (string | null)[];
}

export interface TemplateCreateInput {
  name: string;
  mall: string;
}

export interface TemplateInput {
  name?: string | null;
  mall?: string | null;
  status?: TemplateStatusEnum | null;
}

export interface TemplateUpdateInput {
  name: string;
  mall: string;
  status: TemplateStatusEnum;
}

export interface TenantCreateInput {
  legalName?: string | null;
  unitNo?: string | null;
  code?: string | null;
  leaseNo?: string | null;
  contractId: string;
  tenantType?: StoreTypeEnum | null;
  description?: string | null;
  status: SmopStatusEnum;
  brand: string;
  mall: string;
  operationEndTime?: any | null;
  operationStartTime?: any | null;
  operationScheduleMeta?: any | null;
  operationStatus: SmopOpStatusEnum;
  isOtherBusiness?: boolean | null;
  tinNo?: string | null;
  completeAddress?: string | null;
  signatoryName?: string | null;
  signatoryEmail?: string | null;
  signatoryDesignation?: string | null;
  signatoryMobileNo?: string | null;
  bankName?: string | null;
  bankAccountName?: string | null;
  bankAccountNo?: string | null;
  financeName?: string | null;
  financeEmail?: string | null;
  financeMobileNo?: string | null;
  paymentFeeRate: any;
  rentalType?: SmopRentalTypeEnum | null;
  isFeatured?: boolean | null;
  ipay88SubMid?: string | null;
  isExpressLongDistanceDeliveryAllowed?: boolean | null;
  location?: string | null;
  cluster?: string | null;
  isUseTenantCluster?: boolean | null;
  color?: string | null;
  bannerImage?: any | null;
  bannerImageAlt?: string | null;
  iconImage?: any | null;
  iconImageAlt?: string | null;
  subTenantType?: SubTenantTypeEnum | null;
}

export interface TenantInput {
  search?: string | null;
  isFeatured?: boolean | null;
  id?: (string | null)[] | null;
  mallId?: (string | null)[] | null;
  brandId?: (string | null)[] | null;
  storeType?: StoreTypeEnum | null;
  status?: string | null;
  isFollowed?: boolean | null;
  taskAreaId?: (string | null)[] | null;
  category?: string | null;
  isAssignedToTaskArea?: boolean | null;
  isAssignedInTemplates?: (string | null)[] | null;
  isNotAssignedInTemplates?: (string | null)[] | null;
}

export interface TenantPromotionalRibbonInput {
  promoRibbonDescription?: string | null;
  promoRibbonStart?: any | null;
  promoRibbonEnd?: any | null;
  location?: string | null;
  operationEndTime?: any | null;
  operationStartTime?: any | null;
  isExpressLongDistanceDeliveryAllowed?: boolean | null;
  isSameDayDeliveryAllowed?: boolean | null;
  status: SmopStatusEnum;
  cluster?: string | null;
  isUseTenantCluster?: boolean | null;
}

export interface TenantUpdateInput {
  legalName?: string | null;
  unitNo?: string | null;
  code?: string | null;
  leaseNo?: string | null;
  contractId?: string | null;
  tenantType?: StoreTypeEnum | null;
  description?: string | null;
  status?: SmopStatusEnum | null;
  brand?: string | null;
  mall?: string | null;
  operationEndTime?: any | null;
  operationStartTime?: any | null;
  operationScheduleMeta?: any | null;
  operationStatus?: SmopOpStatusEnum | null;
  isOtherBusiness?: boolean | null;
  tinNo?: string | null;
  completeAddress?: string | null;
  signatoryName?: string | null;
  signatoryEmail?: string | null;
  signatoryDesignation?: string | null;
  signatoryMobileNo?: string | null;
  bankName?: string | null;
  bankAccountName?: string | null;
  bankAccountNo?: string | null;
  financeName?: string | null;
  financeEmail?: string | null;
  financeMobileNo?: string | null;
  paymentFeeRate: any;
  rentalType?: SmopRentalTypeEnum | null;
  isFeatured?: boolean | null;
  ipay88SubMid?: string | null;
  isExpressLongDistanceDeliveryAllowed?: boolean | null;
  location?: string | null;
  cluster?: string | null;
  isUseTenantCluster?: boolean | null;
  color?: string | null;
  bannerImage?: any | null;
  bannerImageAlt?: string | null;
  iconImage?: any | null;
  iconImageAlt?: string | null;
  subTenantType?: SubTenantTypeEnum | null;
}

export interface TranslationInput {
  seoTitle?: string | null;
  seoDescription?: string | null;
  name?: string | null;
  description?: string | null;
  descriptionJson?: any | null;
}

export interface TransportReportFilterInput {
  completedAt?: DateRangeInput | null;
  mallId?: (string | null)[] | null;
  orderCourier?: (string | null)[] | null;
  orderDate?: DateRangeInput | null;
  search?: string | null;
  shippingMethodName?: (string | null)[] | null;
}

export interface UserCreateInput {
  defaultBillingAddress?: AddressInput | null;
  defaultShippingAddress?: AddressInput | null;
  firstName?: string | null;
  lastName?: string | null;
  email?: string | null;
  isActive?: boolean | null;
  note?: string | null;
  accessGroup?: string | null;
  gender?: Gender | null;
  dateOfBirth?: any | null;
  osUsed?: string | null;
  lastOnlineDate?: any | null;
  status?: LockStatus | null;
  firebaseRegistrationId?: string | null;
  lastOrderDate?: any | null;
  lastOrderStatus?: OrderStatusFilter | null;
  newCustomerStatus?: CustomerStatus | null;
  riskCustomer?: boolean | null;
  distanceFromMall?: any | null;
  customerSegment?: CustomerSegment | null;
  redirectUrl?: string | null;
}

export interface UserSortingInput {
  direction: OrderDirection;
  field: UserSortField;
}

export interface VoucherBrandGroupInput {
  brandGroup: string;
  smoDiscountShare?: any | null;
  tenantDiscountShare?: any | null;
  tenants?: (VoucherTenantInput | null)[] | null;
  isAppliedToAllTenants: boolean;
}

export interface VoucherBrandGroupsInput {
  smoDiscountShare?: any | null;
  tenantDiscountShare?: any | null;
  brandGroups?: (VoucherBrandGroupInput | null)[] | null;
  isAppliedToAllBrandGroups: boolean;
}

export interface VoucherCatalogueInput {
  products?: (string | null)[] | null;
  product_variants?: (string | null)[] | null;
  categories?: (string | null)[] | null;
  collections?: (string | null)[] | null;
  tenants?: (string | null)[] | null;
  productsWithSubsidy?: (VoucherProductInput | null)[] | null;
  productVariantsWithSubsidy?: (VoucherProductVariantInput | null)[] | null;
  brandGroupsWithSubsidy?: VoucherBrandGroupsInput | null;
}

export interface VoucherEligibleCustomerInput {
  customers?: (string | null)[] | null;
}

export interface VoucherFilterInput {
  status?: (DiscountStatusEnum | null)[] | null;
  timesUsed?: IntRangeInput | null;
  discountType?: (VoucherDiscountType | null)[] | null;
  started?: DateTimeRangeInput | null;
  search?: string | null;
  isHidden?: boolean | null;
  groupId?: string | null;
  hasGroup?: boolean | null;
  malls?: (string | null)[] | null;
  verticalType?: VoucherClassificationEnum | null;
  voucherType?: (VoucherTypeEnum | null)[] | null;
}

export interface VoucherGroupFilterInput {
  createdBy?: string | null;
  search?: string | null;
  status?: (DiscountStatusEnum | null)[] | null;
}

export interface VoucherGroupSortingInput {
  direction: OrderDirection;
  field: VoucherGroupSortField;
}

export interface VoucherInput {
  type?: VoucherTypeEnum | null;
  voucherConditionInput?: (VoucherConditionInput | null)[] | null;
  minTenants?: number | null;
  name?: string | null;
  code?: string | null;
  verticalType?: VoucherClassificationEnum | null;
  startDate: any;
  endDate: any;
  discountValueType?: DiscountValueTypeEnum | null;
  discountValue?: any | null;
  smopDiscountShare?: any | null;
  tenantDiscountShare?: any | null;
  products?: (string | null)[] | null;
  collections?: (string | null)[] | null;
  categories?: (string | null)[] | null;
  malls?: (string | null)[] | null;
  isAppliedToAllMalls: boolean;
  minAmountSpent?: any | null;
  minCheckoutItemsQuantity?: number | null;
  countries?: (string | null)[] | null;
  applyOncePerOrder?: boolean | null;
  applyOncePerCustomer?: boolean | null;
  usageLimit?: number | null;
  maxDiscountValue?: any | null;
  description?: string | null;
  isLimitToNewCustomer?: boolean | null;
  isHidden?: boolean | null;
  deliveryTypes?: (DiscountDeliveryTypeEnum | null)[] | null;
  paymentMethod?: DiscountPaymentMethodEnum | null;
  isSpecificCustomer?: boolean | null;
  isAppliedOnEligibleItems?: boolean | null;
  isMinEligibleOnly?: boolean | null;
  groupCode?: string | null;
}

export interface VoucherMallInput {
  malls?: (string | null)[] | null;
  isAppliedToAllMalls: boolean;
}

export interface VoucherProductInput {
  product: string;
  smoShare?: any | null;
  tenantShare?: any | null;
}

export interface VoucherProductVariantInput {
  product_variant: string;
  smoShare?: any | null;
  tenantShare?: any | null;
}

export interface VoucherReportFilterInput {
  brandId?: (string | null)[] | null;
  mallId?: (string | null)[] | null;
  orderDate: DateRangeInput;
  search?: string | null;
}

export interface VoucherSortingInput {
  direction: OrderDirection;
  field: VoucherSortField;
}

export interface VoucherTenantInput {
  smoDiscountShare: any;
  tenantDiscountShare: any;
  tenant: string;
}

export interface VoucherTenantSubsidyInput {
  smoDiscountShare: any;
  tenantDiscountShare: any;
}

export interface WarehouseAddressInput {
  streetAddress1: string;
  streetAddress2?: string | null;
  city: string;
  cityArea?: string | null;
  postalCode?: string | null;
  country: CountryCode;
  countryArea?: string | null;
  phone?: string | null;
  areaCode?: string | null;
}

export interface WarehouseCreateInput {
  slug?: string | null;
  companyName?: string | null;
  email?: string | null;
  tenant?: string | null;
  name: string;
  address: WarehouseAddressInput;
  shippingZones?: (string | null)[] | null;
  mall?: string | null;
}

export interface WarehouseFilterInput {
  search?: string | null;
  ids?: (string | null)[] | null;
  malls?: (string | null)[] | null;
  tenant?: string | null;
}

export interface WarehouseSortingInput {
  direction: OrderDirection;
  field: WarehouseSortField;
}

export interface WarehouseUpdateInput {
  slug?: string | null;
  companyName?: string | null;
  email?: string | null;
  tenant?: string | null;
  name?: string | null;
  address?: WarehouseAddressInput | null;
}

export interface WebhookCreateInput {
  name?: string | null;
  targetUrl?: string | null;
  events?: (WebhookEventTypeEnum | null)[] | null;
  serviceAccount?: string | null;
  app?: string | null;
  isActive?: boolean | null;
  secretKey?: string | null;
}

export interface WebhookFilterInput {
  search?: string | null;
  isActive?: boolean | null;
}

export interface WebhookSortingInput {
  direction: OrderDirection;
  field: WebhookSortField;
}

export interface WebhookUpdateInput {
  name?: string | null;
  targetUrl?: string | null;
  events?: (WebhookEventTypeEnum | null)[] | null;
  serviceAccount?: string | null;
  app?: string | null;
  isActive?: boolean | null;
  secretKey?: string | null;
}
